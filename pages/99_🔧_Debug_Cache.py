"""
Debug Cache - P√°gina de diagn√≥stico para cach√© de cuentas
"""

import streamlit as st
import os
from pathlib import Path

st.set_page_config(page_title="Debug Cache", page_icon="üîß", layout="wide")

st.title("üîß Diagn√≥stico de Cach√© de Cuentas")

# Verificar session state
st.header("1Ô∏è‚É£ Session State")
if 'account_cache_manager' in st.session_state:
    st.success("‚úÖ account_cache_manager existe en session_state")
    cache_info = st.session_state.account_cache_manager.get_cache_info()
    st.json(cache_info)
else:
    st.error("‚ùå account_cache_manager NO existe en session_state")

# Verificar directorio data
st.header("2Ô∏è‚É£ Directorio data/")
data_dir = Path("data")
if data_dir.exists():
    st.success(f"‚úÖ Directorio data/ existe: {data_dir.absolute()}")
    files = list(data_dir.glob("*"))
    if files:
        st.write("Archivos en data/:")
        for f in files:
            st.write(f"- {f.name}")
    else:
        st.warning("‚ö†Ô∏è Directorio data/ est√° vac√≠o")
else:
    st.error("‚ùå Directorio data/ NO existe")
    if st.button("Crear directorio data/"):
        data_dir.mkdir(exist_ok=True)
        st.success("‚úÖ Directorio creado")
        st.rerun()

# Verificar permisos
st.header("3Ô∏è‚É£ Permisos")
try:
    test_file = Path("data/test_permissions.txt")
    test_file.parent.mkdir(exist_ok=True)
    test_file.write_text("test")
    test_file.unlink()
    st.success("‚úÖ Permisos de escritura OK")
except Exception as e:
    st.error(f"‚ùå Error de permisos: {e}")

# Verificar customer_ids
st.header("4Ô∏è‚É£ Customer IDs")
if 'customer_ids' in st.session_state:
    st.success(f"‚úÖ {len(st.session_state.customer_ids)} cuentas encontradas")
    st.write(st.session_state.customer_ids)
else:
    st.error("‚ùå customer_ids NO existe")

# Verificar cliente de Google Ads
st.header("5Ô∏è‚É£ Cliente Google Ads")
if 'google_ads_client' in st.session_state:
    client = st.session_state.google_ads_client
    st.success("‚úÖ Cliente existe")
    
    # Verificar si tiene el m√©todo
    if hasattr(client, 'get_account_descriptive_names'):
        st.success("‚úÖ M√©todo get_account_descriptive_names existe")
        
        # Probar el m√©todo
        if st.button("üß™ Probar obtener nombres desde API"):
            with st.spinner("Consultando API..."):
                try:
                    if 'customer_ids' in st.session_state and st.session_state.customer_ids:
                        # Probar solo con la primera cuenta
                        test_id = st.session_state.customer_ids[0]
                        st.info(f"Probando con cuenta: {test_id}")
                        
                        names = client.get_account_descriptive_names([test_id])
                        st.success("‚úÖ API respondi√≥ correctamente")
                        st.json(names)
                    else:
                        st.error("No hay customer_ids")
                except Exception as e:
                    st.error(f"‚ùå Error llamando API: {e}")
                    st.exception(e)
    else:
        st.error("‚ùå M√©todo get_account_descriptive_names NO existe")
        st.warning("‚ö†Ô∏è Debes agregar el m√©todo a modules/google_ads_client.py")
else:
    st.error("‚ùå Cliente NO existe")

# Forzar actualizaci√≥n manual
st.header("6Ô∏è‚É£ Forzar Cach√© Manual")
if st.button("üîÑ Forzar actualizaci√≥n completa"):
    if 'account_cache_manager' in st.session_state and 'customer_ids' in st.session_state:
        try:
            # Limpiar cach√©
            st.session_state.account_cache_manager.clear_cache()
            st.info("üóëÔ∏è Cach√© limpiado")
            
            # Obtener nombres
            client = st.session_state.google_ads_client
            if client and hasattr(client, 'get_account_descriptive_names'):
                customer_ids = st.session_state.customer_ids
                st.info(f"üì° Consultando API para {len(customer_ids)} cuentas...")
                
                names = client.get_account_descriptive_names(customer_ids)
                st.success(f"‚úÖ Obtenidos {len(names)} nombres")
                st.json(names)
                
                # Guardar en cach√©
                st.session_state.account_cache_manager.set_multiple_accounts(names)
                st.success("üíæ Guardado en cach√©")
                
                # Verificar archivo
                cache_file = Path("data/account_names_cache.json")
                if cache_file.exists():
                    st.success(f"‚úÖ Archivo creado: {cache_file.absolute()}")
                    st.code(cache_file.read_text(), language="json")
                else:
                    st.error("‚ùå Archivo NO se cre√≥")
            else:
                st.error("M√©todo get_account_descriptive_names no disponible")
        except Exception as e:
            st.error(f"‚ùå Error: {e}")
            st.exception(e)
    else:
        st.error("Falta account_cache_manager o customer_ids")

# Ver logs
st.header("7Ô∏è‚É£ Logs Recientes")
if st.button("üìã Ver logs"):
    log_file = Path("logs/app.log")
    if log_file.exists():
        logs = log_file.read_text().split("\n")
        st.code("\n".join(logs[-50:]))  # √öltimas 50 l√≠neas
    else:
        st.warning("No se encontr√≥ archivo de logs")