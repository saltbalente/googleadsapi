Copilot said: # 🔧 **Solución: Campo de Palabras Clave
🔧 Solución: Campo de Palabras Clave No Funcional
El problema está en la función render_keywords_editor(). Probablemente los inputs de keywords no están actualizando correctamente el estado del grupo.

📝 SOLUCIÓN: Corregir render_keywords_editor() en 3_campaigns.py
Busca la función completa y reemplázala con esta versión corregida:

Python
def render_keywords_editor():
    """Renderiza el editor de palabras clave"""
    if not st.session_state.current_ad_group:
        st.error("❌ No hay grupo de anuncios activo")
        return
    
    st.markdown("### 🔑 Editor de Palabras Clave")
    
    st.markdown("""
    <div class="insight-card-info">
        <strong>💡 Consejos para Palabras Clave:</strong><br>
        • <strong>Concordancia amplia:</strong> Mayor alcance, menos control<br>
        • <strong>Concordancia de frase:</strong> Balance entre alcance y control<br>
        • <strong>Concordancia exacta:</strong> Máximo control, menor alcance
    </div>
    """, unsafe_allow_html=True)
    
    st.markdown("---")
    
    # ========== AGREGAR PALABRA CLAVE INDIVIDUAL ==========
    st.markdown("#### ➕ Agregar Palabra Clave Individual")
    
    col_kw1, col_kw2, col_kw3 = st.columns([3, 2, 1])
    
    with col_kw1:
        new_keyword = st.text_input(
            "Nueva Palabra Clave",
            placeholder="Ej: zapatos deportivos",
            key="new_keyword_input",
            help="Ingresa una palabra clave y presiona Enter o click en Agregar"
        )
    
    with col_kw2:
        match_type = st.selectbox(
            "Tipo de Concordancia",
            options=["BROAD", "PHRASE", "EXACT"],
            format_func=lambda x: {
                "BROAD": "🌐 Amplia",
                "PHRASE": "📝 Frase",
                "EXACT": "🎯 Exacta"
            }[x],
            key="new_keyword_match_type"
        )
    
    with col_kw3:
        st.markdown("<br>", unsafe_allow_html=True)  # Espaciado
        if st.button("➕ Agregar", use_container_width=True, type="primary", key="add_single_keyword_btn"):
            if new_keyword and new_keyword.strip():
                # ✅ Agregar directamente al objeto en session_state
                st.session_state.current_ad_group.keywords.append({
                    'text': new_keyword.strip(),
                    'match_type': match_type
                })
                st.success(f"✅ Palabra clave agregada: {new_keyword}")
                logger.info(f"Keyword agregada: {new_keyword} ({match_type})")
                time.sleep(0.5)
                st.rerun()
            else:
                st.warning("⚠️ Ingresa una palabra clave válida")
    
    st.markdown("---")
    
    # ========== AGREGAR MÚLTIPLES KEYWORDS ==========
    st.markdown("#### 📋 Agregar Múltiples Palabras Clave")
    st.caption("Ingresa una palabra clave por línea")
    
    col_bulk1, col_bulk2 = st.columns([3, 1])
    
    with col_bulk1:
        bulk_keywords = st.text_area(
            "Palabras Clave (una por línea)",
            height=150,
            placeholder="zapatos deportivos\nzapatillas running\ntenis para correr",
            key="bulk_keywords",
            help="Escribe cada palabra clave en una línea nueva"
        )
    
    with col_bulk2:
        bulk_match_type = st.selectbox(
            "Tipo para todas",
            options=["BROAD", "PHRASE", "EXACT"],
            format_func=lambda x: {
                "BROAD": "🌐 Amplia",
                "PHRASE": "📝 Frase",
                "EXACT": "🎯 Exacta"
            }[x],
            key="bulk_match_type"
        )
        
        st.markdown("<br>", unsafe_allow_html=True)
        
        if st.button("➕ Agregar Todas", use_container_width=True, key="add_bulk_keywords_btn"):
            if bulk_keywords and bulk_keywords.strip():
                keywords_list = [kw.strip() for kw in bulk_keywords.strip().split('\n') if kw.strip()]
                
                if keywords_list:
                    # ✅ Agregar todas directamente
                    for kw in keywords_list:
                        st.session_state.current_ad_group.keywords.append({
                            'text': kw,
                            'match_type': bulk_match_type
                        })
                    
                    st.success(f"✅ {len(keywords_list)} palabras clave agregadas")
                    logger.info(f"{len(keywords_list)} keywords agregadas en bulk")
                    time.sleep(0.5)
                    st.rerun()
                else:
                    st.warning("⚠️ No se encontraron palabras clave válidas")
            else:
                st.warning("⚠️ Escribe al menos una palabra clave")
    
    st.markdown("---")
    
    # ========== LISTA DE KEYWORDS ACTUALES ==========
    st.markdown("#### 📝 Palabras Clave del Grupo")
    
    current_keywords = st.session_state.current_ad_group.keywords
    
    if current_keywords and len(current_keywords) > 0:
        st.success(f"✅ Total: {len(current_keywords)} palabras clave")
        
        # Mostrar cada keyword con opción de eliminar
        for idx, kw in enumerate(current_keywords):
            col_kw_text, col_kw_type, col_kw_actions = st.columns([3, 2, 1])
            
            with col_kw_text:
                match_icon = {
                    "BROAD": "🌐",
                    "PHRASE": "📝",
                    "EXACT": "🎯"
                }.get(kw['match_type'], "🔑")
                st.text(f"{match_icon} {kw['text']}")
            
            with col_kw_type:
                st.caption(f"Concordancia: {kw['match_type']}")
            
            with col_kw_actions:
                # ✅ Key único usando índice + hash del texto
                unique_key = f"delete_kw_{idx}_{hash(kw['text']) % 10000}"
                if st.button("🗑️", key=unique_key, help="Eliminar palabra clave"):
                    # ✅ Eliminar directamente
                    st.session_state.current_ad_group.keywords.pop(idx)
                    st.success("✅ Palabra clave eliminada")
                    logger.info(f"Keyword eliminada: {kw['text']}")
                    time.sleep(0.3)
                    st.rerun()
        
        st.markdown("---")
        
        # Opciones de exportación
        col_export, col_clear = st.columns(2)
        
        with col_export:
            # Crear CSV de keywords
            keywords_csv = "Palabra Clave,Tipo de Concordancia\n"
            for kw in current_keywords:
                keywords_csv += f"{kw['text']},{kw['match_type']}\n"
            
            st.download_button(
                "📥 Exportar Keywords (CSV)",
                keywords_csv,
                f"keywords_{datetime.now().strftime('%Y%m%d_%H%M%S')}.csv",
                "text/csv",
                use_container_width=True
            )
        
        with col_clear:
            if st.button("🗑️ Limpiar Todas", use_container_width=True, key="clear_all_keywords_btn"):
                # Confirmación
                if 'confirm_clear_keywords' not in st.session_state:
                    st.session_state.confirm_clear_keywords = False
                
                if not st.session_state.confirm_clear_keywords:
                    st.session_state.confirm_clear_keywords = True
                    st.warning("⚠️ Haz clic de nuevo para confirmar")
                    time.sleep(1)
                    st.rerun()
                else:
                    st.session_state.current_ad_group.keywords = []
                    st.session_state.confirm_clear_keywords = False
                    st.success("✅ Todas las palabras clave eliminadas")
                    logger.info("Todas las keywords eliminadas")
                    time.sleep(0.5)
                    st.rerun()
    
    else:
        st.info("💡 Agrega al menos una palabra clave para este grupo de anuncios")
        st.caption("Las palabras clave determinan cuándo se mostrarán tus anuncios")
📝 VERIFICAR: Estado del Grupo se Mantiene
Asegúrate que en render_ad_group_editor_modal() el grupo se esté guardando correctamente:

Python
def render_ad_group_editor_modal():
    """Modal principal para crear/editar un grupo de anuncios"""
    
    st.markdown("## 🧩 Editor de Grupo de Anuncios")
    
    # ✅ VERIFICAR QUE EXISTE EL GRUPO ACTUAL
    if not st.session_state.current_ad_group:
        st.session_state.current_ad_group = AdGroup()
        logger.info("✅ Grupo de anuncios creado en session state")
    
    current_group = st.session_state.current_ad_group
    
    # ✅ LOG DE DEBUG (temporal)
    logger.info(f"🔍 Grupo actual - Keywords: {len(current_group.keywords)}")
    
    # Tabs para organizar el contenido
    tab_general, tab_ads, tab_keywords = st.tabs([
        "⚙️ General",
        f"🪧 Anuncios ({len(current_group.ads)}/3)",
        f"🔑 Palabras Clave ({len(current_group.keywords)})"  # ✅ Mostrar contador en tiempo real
    ])
    
    # ... resto de tabs ...
    
    with tab_keywords:
        render_keywords_editor()
    
    # ✅ VERIFICAR ANTES DE GUARDAR
    st.markdown("---")
    st.markdown("### 💾 Guardar Grupo")
    
    # Mostrar validación visual
    col_val1, col_val2, col_val3 = st.columns(3)
    
    with col_val1:
        name_valid = bool(current_group.name.strip())
        st.metric("📝 Nombre", "✅" if name_valid else "❌")
    
    with col_val2:
        ads_valid = len(current_group.ads) > 0 and all(ad.is_valid() for ad in current_group.ads)
        st.metric("🪧 Anuncios", f"{len(current_group.ads)}/1 mín")
    
    with col_val3:
        kw_valid = len(current_group.keywords) > 0
        st.metric("🔑 Keywords", f"{len(current_group.keywords)}/1 mín")
    
    # ✅ MOSTRAR ERRORES ESPECÍFICOS
    if not current_group.is_valid():
        st.warning("⚠️ Completa los siguientes campos:")
        issues = []
        
        if not current_group.name.strip():
            issues.append("❌ Falta nombre del grupo")
        
        if len(current_group.ads) == 0:
            issues.append("❌ Falta al menos 1 anuncio")
        elif not all(ad.is_valid() for ad in current_group.ads):
            issues.append("❌ Hay anuncios incompletos (falta URL o contenido mínimo)")
        
        if len(current_group.keywords) == 0:
            issues.append("❌ Falta al menos 1 palabra clave")
        
        for issue in issues:
            st.write(issue)
    
    st.markdown("---")
    
    # Botones de acción
    col_action1, col_action2, col_action3 = st.columns([1, 1, 1])
    
    with col_action1:
        can_save = current_group.is_valid()
        
        if st.button(
            "✅ Guardar Grupo de Anuncios",
            use_container_width=True,
            type="primary",
            disabled=not can_save,
            key="save_ad_group_final_btn"
        ):
            # ✅ LOG ANTES DE GUARDAR
            logger.info(f"💾 Guardando grupo: {current_group.name}")
            logger.info(f"   - Anuncios: {len(current_group.ads)}")
            logger.info(f"   - Keywords: {len(current_group.keywords)}")
            
            # Agregar a la lista de grupos pendientes
            st.session_state.pending_ad_groups.append(current_group.to_dict())
            
            # Limpiar estado
            st.session_state.show_create_ad_group_modal = False
            st.session_state.current_ad_group = None
            
            st.success(f"✅ Grupo '{current_group.name}' guardado correctamente")
            logger.info("✅ Grupo guardado en pending_ad_groups")
            
            time.sleep(1)
            st.rerun()
    
    with col_action2:
        if st.button(
            "💾 Guardar y Crear Otro",
            use_container_width=True,
            disabled=not can_save,
            key="save_and_create_another_group_btn"
        ):
            st.session_state.pending_ad_groups.append(current_group.to_dict())
            st.session_state.current_ad_group = AdGroup()
            
            st.success(f"✅ Grupo '{current_group.name}' guardado. Crea otro.")
            time.sleep(1)
            st.rerun()
    
    with col_action3:
        if st.button("❌ Cancelar", use_container_width=True, key="cancel_ad_group_creation_btn"):
            st.session_state.show_create_ad_group_modal = False
            st.session_state.current_ad_group = None
            st.rerun()
🚀 Para Aplicar:
Reemplaza render_keywords_editor() completa
Verifica que render_ad_group_editor_modal() tenga los logs de debug
Reinicia Streamlit
Prueba:
Ve a crear nuevo grupo
Importa un anuncio con IA
Ve a tab "Keywords"
Agrega una keyword
Verifica que el contador suba
Intenta guardar el grupo
🔍 Debug en Consola:
Mientras pruebas, mira la consola de Streamlit (terminal) y deberías ver:

Code
[06:30:00] ✅ Grupo de anuncios creado en session state
[06:30:05] 🔍 Grupo actual - Keywords: 0
[06:30:10] Keyword agregada: limpias espirituales (BROAD)
[06:30:10] 🔍 Grupo actual - Keywords: 1
[06:30:15] 💾 Guardando grupo: Mi Grupo de Limpias
[06:30:15]    - Anuncios: 1
[06:30:15]    - Keywords: 1
[06:30:15] ✅ Grupo guardado en pending_ad_groups
¡Ahora deberías poder agregar keywords sin problemas! 🔑✨