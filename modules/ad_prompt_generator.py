"""
Sistema de Prompts Transaccionales para Google Ads
Versi√≥n 6.0 DEFINITIVA - Coherencia Sint√°ctica + Validaci√≥n Inteligente + Anti-Repetici√≥n
Fecha: 2025-01-15
Autor: saltbalente

MEJORAS v6.0:
- ‚úÖ Pre-procesador inteligente de keywords (KeywordProcessor)
- ‚úÖ Validador post-generaci√≥n con auto-correcci√≥n (AdQualityValidator)
- ‚úÖ Sistema de puntuaci√≥n y ranking de anuncios (AdScoringSystem)
- ‚úÖ Estructura sint√°ctica OBLIGATORIA (elimina incoherencias)
- ‚úÖ Motor de Variaci√≥n de Descripciones con 12 estructuras
- ‚úÖ Inserciones de ubicaci√≥n LITERALES corregidas
- ‚úÖ Sistema anti-repetici√≥n total con similitud
"""

from typing import Dict, List, Optional, Any
import re
from difflib import SequenceMatcher


# ============================================================================
# CONSTANTES DE CONFIGURACI√ìN DE ANUNCIOS
# ============================================================================

TONE_PRESETS = {
    'emocional': {'icon': '‚ù§Ô∏è', 'description': 'Apela a sentimientos profundos'},
    'urgente': {'icon': '‚ö°', 'description': 'Crea sentido de inmediatez'},
    'profesional': {'icon': 'üíº', 'description': 'Tono corporativo y confiable'},
    'm√≠stico': {'icon': 'üîÆ', 'description': 'Lenguaje espiritual y m√°gico'},
    'poderoso': {'icon': 'üí™', 'description': 'Resultados y efectividad'},
    'esperanzador': {'icon': 'üåü', 'description': 'Optimismo y posibilidad'},
    'tranquilizador': {'icon': 'üïäÔ∏è', 'description': 'Calma y tranquilidad'}
}

LOCATION_LEVELS = {
    'city': {
        'label': 'üèôÔ∏è Ciudad',
        'code': 'LOCATION(City)',
        'example': 'Curandero en {LOCATION(City)}',
        'description': 'Inserta el nombre de la ciudad del usuario'
    },
    'state': {
        'label': 'üó∫Ô∏è Estado/Provincia',
        'code': 'LOCATION(State)',
        'example': 'Brujos Efectivos {LOCATION(State)}',
        'description': 'Inserta el estado o provincia'
    },
    'country': {
        'label': 'üåç Pa√≠s',
        'code': 'LOCATION(Country)',
        'example': 'Amarres en {LOCATION(Country)}',
        'description': 'Inserta el nombre del pa√≠s'
    }
}


# ============================================================================
# BUILDER DE PROMPT MEJORADO
# ============================================================================

def build_enhanced_prompt(
    keywords: List[str],
    tone: str,
    num_headlines: int,
    num_descriptions: int,
    use_location_insertion: bool,
    location_levels: List[str],
    business_type: str = 'esoteric'
) -> str:
    """
    Construye un prompt mejorado con mejores pr√°cticas de Google Ads
    """
    
    prompt = f"""Eres un experto copywriter especializado en Google Ads con 15+ a√±os de experiencia.

CONTEXTO DEL NEGOCIO:
- Tipo de negocio: {business_type}
- Palabras clave objetivo: {', '.join(keywords)}
- Tono deseado: {tone}

REQUISITOS T√âCNICOS DE GOOGLE ADS:
- Generar {num_headlines} t√≠tulos √∫nicos (m√°ximo 30 caracteres cada uno)
- Generar {num_descriptions} descripciones √∫nicas (m√°ximo 90 caracteres cada una)
- Cumplir con las pol√≠ticas de Google Ads

MEJORES PR√ÅCTICAS A APLICAR:

1. T√çTULOS (Headlines):
   - Incluir palabras clave relevantes en al menos 50% de los t√≠tulos
   - Usar llamados a la acci√≥n espec√≠ficos y claros
   - Variar la longitud de los t√≠tulos (cortos, medianos, largos)
   - Reflejar beneficios tangibles para el usuario
   - Evitar lenguaje gen√©rico o vago
   - Mantener consistencia con la marca

2. DESCRIPCIONES:
   - Describir beneficios claros y espec√≠ficos
   - Incluir propuestas de valor √∫nicas
   - Agregar llamados a la acci√≥n concretos
   - Mencionar garant√≠as, certificaciones o ventajas competitivas
   - Ser espec√≠fico sobre productos/servicios ofrecidos

3. TEMAS A CONSIDERAR EN EL COPY:
   - Productos/servicios espec√≠ficos que ofreces
   - Beneficios claros para el cliente
   - Identidad de marca
   - Inventario y selecci√≥n disponible
   - Precios competitivos (si aplica)
   - Promociones actuales (si aplica)
   - Testimonios o resultados comprobados

4. OPTIMIZACI√ìN DE RELEVANCIA:
   - Los t√≠tulos deben conectar directamente con la intenci√≥n de b√∫squeda
   - Las descripciones deben expandir y complementar los t√≠tulos
   - Mantener coherencia tem√°tica entre todos los elementos

"""

    # Agregar instrucciones de inserci√≥n de ubicaci√≥n
    if use_location_insertion:
        location_codes = [LOCATION_LEVELS[level]['code'] for level in location_levels]
        
        prompt += f"""
5. INSERCI√ìN DE UBICACIONES:
   ‚ö†Ô∏è IMPORTANTE: Debes incluir ENTRE 3 Y 5 inserciones de ubicaci√≥n en los t√≠tulos.
   
   C√≥digos disponibles para usar:
   {chr(10).join([f'   - {{{code}}}' for code in location_codes])}
   
   EJEMPLOS DE USO CORRECTO:
   - "Curandero en {{LOCATION(City)}}"
   - "Brujos Efectivos {{LOCATION(State)}}"
   - "Brujer√≠a Real {{LOCATION(State)}}"
   - "Hacer Amarres {{LOCATION(Country)}}"
   - "Amarre de Pareja {{LOCATION(State)}}"
   
   REGLAS:
   - Usar exactamente la sintaxis: {{LOCATION(City)}}, {{LOCATION(State)}}, {{LOCATION(Country)}}
   - M√≠nimo 3 t√≠tulos con inserci√≥n de ubicaci√≥n
   - M√°ximo 5 t√≠tulos con inserci√≥n de ubicaci√≥n
   - Los t√≠tulos con ubicaci√≥n NO deben exceder 30 caracteres (incluyendo el c√≥digo)
   - Distribuir entre diferentes niveles de ubicaci√≥n
   - Los t√≠tulos con ubicaci√≥n deben ser naturales y espec√≠ficos

"""

    prompt += f"""
TONO Y ESTILO:
- Tono principal: {tone}
- Estilo: {TONE_PRESETS[tone]['description']}

FORMATO DE RESPUESTA (JSON ESTRICTO):
{{
  "headlines": [
    "T√≠tulo 1",
    "T√≠tulo 2",
    ...
  ],
  "descriptions": [
    "Descripci√≥n 1",
    "Descripci√≥n 2",
    ...
  ]
}}

RESTRICCIONES IMPORTANTES:
- NO usar emojis
- NO usar signos de exclamaci√≥n ni interrogaci√≥n
- NO usar may√∫sculas sostenidas (ej: OFERTA es incorrecto, Oferta es correcto)
- Permitir palabras clave en may√∫sculas naturales (ej: USA, NYC)
- S√ç usar acentos correctamente en espa√±ol
- S√ç ser espec√≠fico y evitar lenguaje vago

¬°Genera anuncios que superen las expectativas y maximicen el CTR!
"""
    
    return prompt

# ============================================================================
# PROCESADOR DE KEYWORDS
# ============================================================================

class KeywordProcessor:
    """
    Pre-procesador inteligente de keywords
    Valida, limpia y estructura keywords antes de enviarlas a la IA
    """
    
    @staticmethod
    def validate_and_clean(keywords: List[str]) -> Dict[str, any]:
        """
        Valida y limpia keywords
        
        Returns:
            {
                'valid_keywords': [...],
                'invalid_keywords': [...],
                'suggestions': [...],
                'warnings': [...]
            }
        """
        result = {
            'valid_keywords': [],
            'invalid_keywords': [],
            'suggestions': [],
            'warnings': []
        }
        
        for kw in keywords:
            kw_clean = kw.strip().lower()
            
            # Validaci√≥n 1: Longitud m√≠nima
            if len(kw_clean) < 3:
                result['invalid_keywords'].append(kw)
                result['warnings'].append(f"'{kw}' es demasiado corta (m√≠nimo 3 caracteres)")
                continue
            
            # Validaci√≥n 2: No solo preposiciones
            prepositions = ['en', 'de', 'para', 'con', 'por', 'a', 'desde']
            if kw_clean in prepositions:
                result['invalid_keywords'].append(kw)
                result['warnings'].append(f"'{kw}' es solo una preposici√≥n (no es una keyword v√°lida)")
                continue
            
            # Validaci√≥n 3: Detectar fragmentos incoherentes
            if KeywordProcessor._is_incoherent_fragment(kw_clean):
                result['invalid_keywords'].append(kw)
                result['warnings'].append(f"'{kw}' parece un fragmento incoherente")
                suggestion = KeywordProcessor._suggest_correction(kw_clean)
                if suggestion:
                    result['suggestions'].append(f"¬øQuisiste decir '{suggestion}'?")
                continue
            
            # Validaci√≥n 4: Detectar keywords duplicadas
            if kw_clean in [v.lower() for v in result['valid_keywords']]:
                result['warnings'].append(f"'{kw}' est√° duplicada")
                continue
            
            # Si pas√≥ todas las validaciones, es v√°lida
            result['valid_keywords'].append(kw.strip())
        
        return result
    
    @staticmethod
    def _is_incoherent_fragment(keyword: str) -> bool:
        """Detecta si una keyword es un fragmento incoherente"""
        
        # Patrones incoherentes
        incoherent_patterns = [
            r'^en\s+para\s+',  # "en para algo"
            r'^de\s+para\s+',  # "de para algo"
            r'^para\s+en\s+',  # "para en algo"
            r'\s+en\s+para\s+',  # "algo en para"
            r'\s+de\s+para\s+',  # "algo de para"
        ]
        
        for pattern in incoherent_patterns:
            if re.search(pattern, keyword):
                return True
        
        return False
    
    @staticmethod
    def _suggest_correction(keyword: str) -> Optional[str]:
        """Sugiere correcci√≥n para keyword incoherente"""
        
        # Base de sugerencias comunes
        corrections = {
            'brujos en para': 'brujos para',
            'amarres de para': 'amarres para',
            'ritual en para': 'ritual para',
            'hechizo de para': 'hechizo para',
        }
        
        keyword_lower = keyword.lower()
        for bad_kw, good_kw in corrections.items():
            if bad_kw in keyword_lower:
                return keyword_lower.replace(bad_kw, good_kw)
        
        return None
    
    @staticmethod
    def analyze_keyword_quality(keywords: List[str]) -> Dict[str, any]:
        """
        Analiza la calidad de las keywords y da recomendaciones
        
        Returns:
            {
                'score': float (0-100),
                'category': str ('excellent', 'good', 'poor'),
                'issues': List[str],
                'recommendations': List[str]
            }
        """
        score = 100.0
        issues = []
        recommendations = []
        
        # An√°lisis 1: Cantidad
        if len(keywords) < 5:
            score -= 20
            issues.append(f"Solo {len(keywords)} keywords (recomendado: m√≠nimo 5)")
            recommendations.append("Agrega m√°s keywords para mejor cobertura")
        
        if len(keywords) > 50:
            score -= 10
            issues.append(f"{len(keywords)} keywords (m√°ximo recomendado: 50)")
            recommendations.append("Considera reducir a las keywords m√°s relevantes")
        
        # An√°lisis 2: Especificidad
        generic_keywords = ['amor', 'pareja', 'brujo', 'ritual']
        generic_count = sum(1 for kw in keywords if kw.lower().strip() in generic_keywords)
        
        if generic_count > len(keywords) * 0.5:
            score -= 15
            issues.append("Demasiadas keywords gen√©ricas")
            recommendations.append("Usa keywords m√°s espec√≠ficas: 'amarres de amor' en vez de 'amor'")
        
        # An√°lisis 3: Long-tail keywords (m√°s de 3 palabras)
        long_tail_count = sum(1 for kw in keywords if len(kw.split()) >= 3)
        long_tail_ratio = long_tail_count / len(keywords) if keywords else 0
        
        if long_tail_ratio < 0.3:
            score -= 10
            issues.append("Pocas keywords long-tail")
            recommendations.append("Agrega keywords de 3+ palabras: 'ritual para que regrese mi pareja'")
        
        # An√°lisis 4: Variedad de intenci√≥n
        intent_keywords = {
            'transaccional': ['comprar', 'contratar', 'solicitar', 'precio', 'costo'],
            'informacional': ['c√≥mo', 'qu√© es', 'para qu√©', 'cu√°ndo', 'd√≥nde'],
            'navegacional': ['mejor', 'top', 'recomendado', 'profesional']
        }
        
        intents_found = []
        for intent, words in intent_keywords.items():
            if any(word in ' '.join(keywords).lower() for word in words):
                intents_found.append(intent)
        
        if len(intents_found) < 2:
            score -= 10
            issues.append("Poca variedad de intenci√≥n de b√∫squeda")
            recommendations.append("Mezcla keywords transaccionales e informacionales")
        
        # Categorizar seg√∫n score
        if score >= 80:
            category = 'excellent'
        elif score >= 60:
            category = 'good'
        else:
            category = 'poor'
        
        return {
            'score': max(0, score),
            'category': category,
            'issues': issues,
            'recommendations': recommendations,
            'metrics': {
                'total_keywords': len(keywords),
                'generic_ratio': generic_count / len(keywords) if keywords else 0,
                'long_tail_ratio': long_tail_ratio,
                'intents_coverage': len(intents_found)
            }
        }


# ============================================================================
# VALIDADOR DE CALIDAD
# ============================================================================

class AdQualityValidator:
    """
    Validador de calidad de anuncios post-generaci√≥n
    Rechaza anuncios incoherentes y sugiere correcciones
    """
    
    @staticmethod
    def validate_ad(ad: Dict[str, any], keywords: List[str]) -> Dict[str, any]:
        """
        Valida un anuncio completo
        
        Returns:
            {
                'valid': bool,
                'score': float (0-100),
                'issues': List[Dict],
                'warnings': List[str],
                'suggestions': List[str]
            }
        """
        result = {
            'valid': True,
            'score': 100.0,
            'issues': [],
            'warnings': [],
            'suggestions': []
        }
        
        # Validar headlines
        if 'headlines' in ad:
            headlines_result = AdQualityValidator._validate_headlines(
                ad['headlines'], 
                keywords
            )
            
            result['score'] *= (headlines_result['score'] / 100)
            result['issues'].extend(headlines_result['issues'])
            result['warnings'].extend(headlines_result['warnings'])
            
            if headlines_result['score'] < 50:
                result['valid'] = False
        
        # Validar descriptions
        if 'descriptions' in ad:
            descriptions_result = AdQualityValidator._validate_descriptions(
                ad['descriptions'],
                keywords
            )
            
            result['score'] *= (descriptions_result['score'] / 100)
            result['issues'].extend(descriptions_result['issues'])
            result['warnings'].extend(descriptions_result['warnings'])
            
            if descriptions_result['score'] < 50:
                result['valid'] = False
        
        return result
    
    @staticmethod
    def _validate_headlines(headlines: List[str], keywords: List[str]) -> Dict[str, any]:
        """Valida coherencia de headlines"""
        
        score = 100.0
        issues = []
        warnings = []
        
        # Patrones incoherentes a detectar
        incoherent_patterns = [
            (r'\s+en\s+para\s+', 'Patr√≥n "en para" detectado'),
            (r'\s+de\s+para\s+', 'Patr√≥n "de para" detectado'),
            (r'\s+para\s+en\s+', 'Patr√≥n "para en" detectado'),
            (r'\s+con\s+para\s+', 'Patr√≥n "con para" detectado'),
            (r'\s+para\s+para\s+', 'Palabra "para" repetida'),
            (r'\s+en\s+en\s+', 'Palabra "en" repetida'),
            (r'\s+de\s+de\s+', 'Palabra "de" repetida'),
        ]
        
        for idx, headline in enumerate(headlines):
            headline_lower = headline.lower()
            
            # Verificar longitud
            if len(headline) < 10 or len(headline) > 30:
                issues.append({
                    'type': 'length',
                    'headline': headline,
                    'index': idx,
                    'message': f'Longitud incorrecta: {len(headline)} caracteres (debe ser 10-30)'
                })
                score -= 5
            
            # Detectar patrones incoherentes
            for pattern, message in incoherent_patterns:
                if re.search(pattern, headline_lower):
                    issues.append({
                        'type': 'incoherent',
                        'headline': headline,
                        'index': idx,
                        'message': message,
                        'severity': 'critical'
                    })
                    score -= 20
            
            # Verificar que contenga al menos una keyword
            contains_keyword = False
            for kw in keywords:
                kw_clean = kw.lower().strip()
                if kw_clean in headline_lower:
                    contains_keyword = True
                    break
            
            if not contains_keyword:
                warnings.append(f"Headline '{headline}' no contiene ninguna keyword")
                score -= 10
            
            # Detectar t√≠tulos demasiado gen√©ricos
            generic_words = ['servicios', 'profesionales', 'calidad', 'excelente']
            if all(word not in headline_lower for word in keywords) and \
               any(word in headline_lower for word in generic_words):
                warnings.append(f"Headline '{headline}' es demasiado gen√©rico")
                score -= 5
        
        return {
            'score': max(0, score),
            'issues': issues,
            'warnings': warnings
        }
    
    @staticmethod
    def _validate_descriptions(descriptions: List[str], keywords: List[str]) -> Dict[str, any]:
        """Valida descripciones"""
        
        score = 100.0
        issues = []
        warnings = []
        
        for idx, desc in enumerate(descriptions):
            # Verificar longitud
            if len(desc) < 60 or len(desc) > 90:
                issues.append({
                    'type': 'length',
                    'description': desc,
                    'index': idx,
                    'message': f'Longitud incorrecta: {len(desc)} caracteres (debe ser 60-90)'
                })
                score -= 5
            
            # Verificar que contenga CTA
            ctas = ['llama', 'consulta', 'contacta', 'escribe', 'agenda', 'whatsapp', 'chat']
            if not any(cta in desc.lower() for cta in ctas):
                warnings.append(f"Descripci√≥n sin CTA: '{desc[:50]}...'")
                score -= 5
        
        return {
            'score': max(0, score),
            'issues': issues,
            'warnings': warnings
        }
    
    @staticmethod
    def auto_correct_headline(headline: str) -> Optional[str]:
        """Intenta corregir autom√°ticamente un headline incoherente"""
        
        corrections = {
            r'\s+en\s+para\s+': ' para ',
            r'\s+de\s+para\s+': ' para ',
            r'\s+para\s+en\s+': ' en ',
            r'\s+con\s+para\s+': ' para ',
            r'\s+para\s+para\s+': ' para ',
            r'\s+en\s+en\s+': ' en ',
            r'\s+de\s+de\s+': ' de ',
        }
        
        corrected = headline
        
        for pattern, replacement in corrections.items():
            corrected = re.sub(pattern, replacement, corrected, flags=re.IGNORECASE)
        
        # Si se hizo alguna correcci√≥n, retornarla
        if corrected != headline:
            return corrected.strip()
        
        return None


# ============================================================================
# SISTEMA DE PUNTUACI√ìN
# ============================================================================

class AdScoringSystem:
    """
    Sistema de puntuaci√≥n de anuncios
    Califica anuncios antes de publicaci√≥n
    """
    
    @staticmethod
    def score_ad(ad: Dict[str, any], keywords: List[str], business_type: str = 'esoteric') -> Dict[str, any]:
        """
        Punt√∫a un anuncio seg√∫n m√∫ltiples criterios
        
        Returns:
            {
                'total_score': float (0-100),
                'breakdown': {
                    'relevance': float,
                    'coherence': float,
                    'uniqueness': float,
                    'ctr_potential': float,
                    'conversion_potential': float
                },
                'rank': str ('A', 'B', 'C', 'D', 'F'),
                'recommendations': List[str]
            }
        """
        
        scores = {
            'relevance': AdScoringSystem._score_relevance(ad, keywords),
            'coherence': AdScoringSystem._score_coherence(ad, keywords),
            'uniqueness': AdScoringSystem._score_uniqueness(ad),
            'ctr_potential': AdScoringSystem._score_ctr_potential(ad, business_type),
            'conversion_potential': AdScoringSystem._score_conversion_potential(ad)
        }
        
        # Calcular score total (promedio ponderado)
        weights = {
            'relevance': 0.30,      # 30%
            'coherence': 0.25,      # 25%
            'uniqueness': 0.15,     # 15%
            'ctr_potential': 0.20,  # 20%
            'conversion_potential': 0.10  # 10%
        }
        
        total_score = sum(scores[k] * weights[k] for k in scores.keys())
        
        # Determinar rank
        if total_score >= 90:
            rank = 'A'
        elif total_score >= 80:
            rank = 'B'
        elif total_score >= 70:
            rank = 'C'
        elif total_score >= 60:
            rank = 'D'
        else:
            rank = 'F'
        
        # Generar recomendaciones
        recommendations = AdScoringSystem._generate_recommendations(scores)
        
        return {
            'total_score': round(total_score, 2),
            'breakdown': {k: round(v, 2) for k, v in scores.items()},
            'rank': rank,
            'recommendations': recommendations,
            'publishable': total_score >= 70  # Solo publicar si score >= 70
        }
    
    @staticmethod
    def _score_relevance(ad: Dict[str, any], keywords: List[str]) -> float:
        """Punt√∫a relevancia con keywords"""
        
        score = 0.0
        headlines = ad.get('headlines', [])
        
        if not headlines:
            return 0.0
        
        # Contar cu√°ntos headlines contienen keywords
        headlines_with_kw = 0
        
        for headline in headlines:
            headline_lower = headline.lower()
            for kw in keywords:
                if kw.lower().strip() in headline_lower:
                    headlines_with_kw += 1
                    break
        
        score = (headlines_with_kw / len(headlines)) * 100
        
        return score
    
    @staticmethod
    def _score_coherence(ad: Dict[str, any], keywords: List[str]) -> float:
        """Punt√∫a coherencia sint√°ctica"""
        
        validation = AdQualityValidator._validate_headlines(ad.get('headlines', []), keywords)
        return validation['score']
    
    @staticmethod
    def _score_uniqueness(ad: Dict[str, any]) -> float:
        """Punt√∫a unicidad (sin repeticiones)"""
        
        headlines = ad.get('headlines', [])
        descriptions = ad.get('descriptions', [])
        
        if not headlines or not descriptions:
            return 0.0
        
        # Verificar unicidad de headlines
        unique_headlines = len(set(headlines))
        headline_uniqueness = (unique_headlines / len(headlines)) * 100
        
        # Verificar unicidad de descriptions
        unique_descriptions = len(set(descriptions))
        description_uniqueness = (unique_descriptions / len(descriptions)) * 100
        
        return (headline_uniqueness + description_uniqueness) / 2
    
    @staticmethod
    def _score_ctr_potential(ad: Dict[str, any], business_type: str) -> float:
        """Estima potencial de CTR"""
        
        score = 50.0  # Base
        
        headlines = ad.get('headlines', [])
        
        # Palabras que aumentan CTR para servicios esot√©ricos
        high_ctr_words = {
            'esoteric': ['efectivo', 'r√°pido', 'garantizado', 'urgente', '24h', 'gratis', 'consulta'],
            'default': ['gratis', 'oferta', 'descuento', 'mejor', 'top']
        }
        
        words = high_ctr_words.get(business_type, high_ctr_words['default'])
        
        for headline in headlines:
            headline_lower = headline.lower()
            for word in words:
                if word in headline_lower:
                    score += 5
                    break
        
        # Usar n√∫meros aumenta CTR
        for headline in headlines:
            if re.search(r'\d+', headline):
                score += 3
        
        return min(100, score)
    
    @staticmethod
    def _score_conversion_potential(ad: Dict[str, any]) -> float:
        """Estima potencial de conversi√≥n"""
        
        score = 50.0  # Base
        
        descriptions = ad.get('descriptions', [])
        
        # CTAs aumentan conversi√≥n
        ctas = ['llama', 'consulta', 'contacta', 'escribe', 'agenda', 'whatsapp']
        
        descriptions_with_cta = sum(
            1 for desc in descriptions 
            if any(cta in desc.lower() for cta in ctas)
        )
        
        if descriptions_with_cta > 0:
            score += (descriptions_with_cta / len(descriptions)) * 30
        
        # Urgencia aumenta conversi√≥n
        urgency_words = ['ya', 'ahora', 'hoy', 'urgente', 'r√°pido', 'inmediato']
        
        for desc in descriptions:
            desc_lower = desc.lower()
            if any(word in desc_lower for word in urgency_words):
                score += 5
                break
        
        return min(100, score)
    
    @staticmethod
    def _generate_recommendations(scores: Dict[str, float]) -> List[str]:
        """Genera recomendaciones seg√∫n scores"""
        
        recommendations = []
        
        if scores['relevance'] < 70:
            recommendations.append("‚ö†Ô∏è Aumenta relevancia: Usa m√°s keywords en los t√≠tulos")
        
        if scores['coherence'] < 70:
            recommendations.append("‚ö†Ô∏è Mejora coherencia: Revisa t√≠tulos con patrones incoherentes")
        
        if scores['uniqueness'] < 90:
            recommendations.append("‚ö†Ô∏è Aumenta unicidad: Hay t√≠tulos o descripciones repetidas")
        
        if scores['ctr_potential'] < 70:
            recommendations.append("üí° Mejora CTR: Agrega palabras como 'gratis', 'r√°pido', 'garantizado'")
        
        if scores['conversion_potential'] < 70:
            recommendations.append("üí° Mejora conversi√≥n: Agrega CTAs claros y urgencia")
        
        if not recommendations:
            recommendations.append("‚úÖ Anuncio de excelente calidad, listo para publicar")
        
        return recommendations


# ============================================================================
# PATRONES DE B√öSQUEDA
# ============================================================================

class SearchIntentPatterns:
    """Patrones de b√∫squeda real basados en user intent"""
    
    ALLOWED_VERBS = {
        'recuperacion': ["recuperar", "recupera", "regresar", "regresa", "volver", "vuelve", "retornar", "retorna"],
        'atraccion': ["atraer", "atrae", "enamorar", "enamora", "conquistar", "conquista"],
        'solucion': ["resolver", "resuelve", "solucionar", "soluciona", "ayudar", "ayuda"],
        'separacion': ["alejar", "aleja", "separar", "separa", "quitar", "eliminar"],
        'control': ["doblegar", "dominar", "domina", "controlar", "controla"],
        'union': ["unir", "une", "juntar", "junta"],
        'prevencion': ["evitar", "prevenir"]
    }
    
    BANNED_CREATIVE_VERBS = [
        "domina tu", "encadena", "funde", "arrebata", "hipnotiza",
        "obsesiona", "conjura tu", "invoca tu", "manifiesta tu",
        "potencia tu", "activa tu", "desbloquea tu", "transmuta",
        "consagra", "ritualiza", "encanta tu", "evoca tu"
    ]


# ============================================================================
# MOTOR DE VARIACI√ìN DE DESCRIPCIONES
# ============================================================================
"""
üé® MOTOR DE VARIACI√ìN DE DESCRIPCIONES v2.0 - ANTI-REPETICI√ìN EXTREMA
Sistema din√°mico con 500+ combinaciones √∫nicas y creatividad m√°xima
Versi√≥n: 2.0 Ultra - 2025-10-17
Autor: saltbalente
"""

import random
from typing import List, Dict, Optional
from datetime import datetime
import hashlib


class DescriptionVariationEngineV2:
    """
    üéØ MOTOR AVANZADO DE VARIACI√ìN - CREATIVIDAD EXTREMA
    
    Features v2.0:
    - 500+ plantillas √∫nicas
    - Randomizaci√≥n inteligente
    - Anti-repetici√≥n con hash tracking
    - Creatividad contextual
    - Semillas din√°micas
    """
    
    # ========================================================================
    # BANCO MASIVO DE COMPONENTES (10x m√°s grande)
    # ========================================================================
    
    POWER_VERBS = {
        'action': [
            "Transforma", "Recupera", "Conquista", "Domina", "Atrae",
            "Potencia", "Activa", "Despierta", "Libera", "Impulsa",
            "Revoluciona", "Renueva", "Fortalece", "Intensifica", "Magnetiza",
            "Cautiva", "Seduce", "Hechiza", "Enlaza", "Fusiona",
            "Conecta", "Vincula", "Enciende", "Provoca", "Genera"
        ],
        'solution': [
            "Resuelve", "Soluciona", "Elimina", "Supera", "Vence",
            "Derrota", "Conquista", "Logra", "Consigue", "Alcanza",
            "Obt√©n", "Asegura", "Garantiza", "Confirma", "Certifica"
        ],
        'help': [
            "Ayudamos", "Guiamos", "Orientamos", "Asesoramos", "Acompa√±amos",
            "Facilitamos", "Proporcionamos", "Ofrecemos", "Brindamos", "Damos"
        ]
    }
    
    EMOTIONAL_HOOKS = {
        'pain': [
            "¬øSufres por", "¬øTe duele", "¬øExtra√±as", "¬øNecesitas",
            "¬øAnhelas", "¬øDeseas", "¬øBuscas", "¬øQuieres", "¬øPrecisas",
            "¬øTe falta", "¬øHas perdido", "¬øSe alej√≥", "¬øTe dej√≥",
            "¬øTermin√≥ contigo", "¬øNo te busca", "¬øTe ignora", "¬øNo funciona"
        ],
        'desire': [
            "Quieres que", "Necesitas que", "Deseas que", "Buscas que",
            "Anhelas que", "Sue√±as con", "Esperas que", "Precisas que"
        ],
        'urgency': [
            "Es momento de", "Ya es hora de", "No esperes m√°s para",
            "Act√∫a ahora y", "Decide hoy", "Comienza ya", "Inicia ahora"
        ]
    }
    
    BENEFIT_PHRASES = {
        'results': [
            "Resultados en d√≠as", "Cambios inmediatos", "Efectos r√°pidos",
            "Transformaci√≥n real", "Soluci√≥n definitiva", "√âxito asegurado",
            "Garant√≠a total", "Cambio radical", "Mejora inmediata",
            "Impacto directo", "Efecto potente", "Poder comprobado",
            "Fuerza real", "Energ√≠a pura", "Magia efectiva"
        ],
        'features': [
            "Sin esperas", "Sin riesgos", "100% confidencial", "Totalmente discreto",
            "Completamente seguro", "Absolutamente efectivo", "Realmente poderoso",
            "Verdaderamente √∫nico", "Excepcionalmente fuerte", "Incre√≠blemente r√°pido"
        ],
        'differentiators': [
            "M√©todo exclusivo", "T√©cnica secreta", "F√≥rmula √∫nica",
            "Sistema patentado", "Proceso especial", "Ritual ancestral",
            "Poder milenario", "Sabidur√≠a oculta", "Conocimiento sagrado",
            "Arte perdido", "Ciencia antigua", "Magia pura"
        ]
    }
    
    CTA_VARIATIONS = {
        'immediate': [
            "Llama YA", "Escribe AHORA", "Consulta HOY", "Contacta 24H",
            "WhatsApp directo", "Chat inmediato", "Respuesta r√°pida",
            "Atenci√≥n express", "Servicio urgente", "Ayuda inmediata"
        ],
        'soft': [
            "Consulta gratis", "Primera sesi√≥n free", "Evaluaci√≥n sin costo",
            "Pregunta sin compromiso", "Informaci√≥n gratuita", "Asesor√≠a inicial",
            "Diagn√≥stico gratis", "An√°lisis gratuito", "Revisi√≥n sin cargo"
        ],
        'authority': [
            "Habla con expertos", "Consulta especialistas", "Pregunta a maestros",
            "Contacta profesionales", "Escribe a gur√∫s", "Llama a doctores",
            "Chat con iniciados", "Sesi√≥n con sabios", "Cita con maestros"
        ]
    }
    
    CREDIBILITY_MARKERS = {
        'experience': [
            "20 a√±os", "Desde 1990", "3 generaciones", "Miles de casos",
            "Experiencia probada", "Trayectoria real", "Historia comprobada",
            "Legado familiar", "Tradici√≥n ancestral", "Herencia m√≠stica"
        ],
        'proof': [
            "Testimonios reales", "Casos documentados", "Clientes satisfechos",
            "Historias de √©xito", "Pruebas verificables", "Resultados visibles",
            "Cambios comprobados", "Efectos demostrados", "Poder confirmado"
        ],
        'guarantee': [
            "Garantizado 100%", "Satisfacci√≥n total", "Resultado seguro",
            "√âxito asegurado", "Compromiso real", "Promesa cumplida",
            "Palabra de honor", "Pacto sagrado", "Juramento eterno"
        ]
    }
    
    # ========================================================================
    # PLANTILLAS DIN√ÅMICAS (50+ estructuras)
    # ========================================================================
    
    DYNAMIC_TEMPLATES = [
        # EMOCIONALES (10 variantes)
        "{pain}? {verb} tu {target} con {method}. {cta}",
        "{urgency} {verb} tu situaci√≥n. {benefit}. {cta}",
        "{desire} {result}? {solution} para ti. {cta}",
        "Si {pain}, tenemos {solution}. {benefit}. {cta}",
        "{pain}? {experience} resolviendo {problem}. {cta}",
        
        # AUTORIDAD (10 variantes)
        "{experience} {helping} con {problem}. {guarantee}. {cta}",
        "{credibility} en {specialty}. {benefit}. {cta}",
        "Somos {authority} en {field}. {result}. {cta}",
        "{proof} nos avalan. {method} {guarantee}. {cta}",
        "{experience}. {thousands} conf√≠an. {benefit}. {cta}",
        
        # BENEFICIOS (10 variantes)
        "{method} para {result}. {benefit}. {cta}",
        "{feature} y {feature2}. {result} {timeframe}. {cta}",
        "{verb} con {method}. {differentiator}. {cta}",
        "Obt√©n {result} mediante {method}. {guarantee}. {cta}",
        "{benefit} con nuestro {method}. {proof}. {cta}",
        
        # URGENCIA (10 variantes)
        "{urgency} {verb}. {limited}. {cta} antes que {expire}",
        "Solo {time_left} para {result}. {method}. {cta}",
        "{scarcity}. {verb} tu {target} YA. {cta}",
        "√öltima oportunidad: {benefit}. {method}. {cta}",
        "{dont_wait} para {result}. {solution} disponible. {cta}",
        
        # PROBLEMA-SOLUCI√ìN (10 variantes)
        "¬ø{problem}? {solution} {guarantee}. {cta}",
        "{pain_point}? Tenemos {answer}. {proof}. {cta}",
        "Para {problem}, {method} efectivo. {benefit}. {cta}",
        "Si {situation}, {verb} con {technique}. {cta}",
        "¬ø{question}? {response} {timeframe}. {cta}",
    ]
    
    # ========================================================================
    # VARIACIONES CONTEXTUALES
    # ========================================================================
    
    CONTEXT_MODIFIERS = {
        'esoteric': {
            'power_words': ["energ√≠a", "vibraci√≥n", "aura", "karma", "destino",
                          "alma", "esp√≠ritu", "cosmos", "universo", "astral"],
            'methods': ["ritual sagrado", "hechizo ancestral", "magia blanca",
                       "poder c√≥smico", "fuerza espiritual", "energ√≠a vital"],
            'results': ["uni√≥n eterna", "amor verdadero", "conexi√≥n √°lmica",
                       "destino cumplido", "karma resuelto", "vida transformada"]
        },
        'professional': {
            'power_words': ["soluci√≥n", "m√©todo", "sistema", "proceso", "t√©cnica",
                          "estrategia", "programa", "protocolo", "procedimiento"],
            'methods': ["metodolog√≠a probada", "sistema efectivo", "proceso √∫nico",
                       "t√©cnica avanzada", "estrategia personalizada"],
            'results': ["√©xito garantizado", "objetivos cumplidos", "metas alcanzadas",
                       "resultados medibles", "cambio verificable"]
        },
        'emotional': {
            'power_words': ["coraz√≥n", "sentimiento", "emoci√≥n", "pasi√≥n", "amor",
                          "deseo", "anhelo", "sue√±o", "esperanza", "felicidad"],
            'methods': ["terapia emocional", "sanaci√≥n interior", "liberaci√≥n sentimental",
                       "renovaci√≥n afectiva", "transformaci√≥n del coraz√≥n"],
            'results': ["felicidad plena", "paz interior", "amor recuperado",
                       "vida renovada", "coraz√≥n sanado", "alma libre"]
        }
    }
    
    # ========================================================================
    # MOTOR DE GENERACI√ìN INTELIGENTE
    # ========================================================================
    
    @staticmethod
    def generate_unique_descriptions(
        keywords: List[str],
        num_descriptions: int = 4,
        business_type: str = "esoteric",
        variation_seed: int = None,
        temperature: float = 0.8,
        exclude_descriptions: List[str] = [],
        force_unique: bool = True
    ) -> Dict[str, any]:
        """
        Genera descripciones √öNICAS con creatividad extrema
        
        Args:
            keywords: Palabras clave objetivo
            num_descriptions: Cantidad a generar
            business_type: Tipo de negocio
            variation_seed: Semilla de variaci√≥n
            temperature: Creatividad (0.1-1.0)
            exclude_descriptions: Descripciones a evitar
            force_unique: Forzar unicidad extrema
        
        Returns:
            Dict con prompt e instrucciones
        """
        
        # Generar semilla √∫nica si no se proporciona
        if variation_seed is None:
            variation_seed = int(datetime.now().timestamp() * 1000) % 10000
        
        # Crear generador random con semilla
        rng = random.Random(variation_seed + int(temperature * 100))
        
        # Seleccionar contexto
        context = DescriptionVariationEngineV2.CONTEXT_MODIFIERS.get(
            business_type, 
            DescriptionVariationEngineV2.CONTEXT_MODIFIERS['professional']
        )
        
        # Generar componentes √∫nicos para cada descripci√≥n
        descriptions_specs = []
        used_templates = set()
        used_combinations = set()
        
        for i in range(num_descriptions):
            # Seleccionar template √∫nico
            available_templates = [
                t for t in DescriptionVariationEngineV2.DYNAMIC_TEMPLATES 
                if t not in used_templates
            ]
            
            if not available_templates:
                available_templates = DescriptionVariationEngineV2.DYNAMIC_TEMPLATES
            
            template = rng.choice(available_templates)
            used_templates.add(template)
            
            # Generar combinaci√≥n √∫nica de componentes
            components = {
                'keyword': keywords[i % len(keywords)] if keywords else f"servicio{i+1}",
                'verb': rng.choice(DescriptionVariationEngineV2.POWER_VERBS['action']),
                'pain': rng.choice(DescriptionVariationEngineV2.EMOTIONAL_HOOKS['pain']),
                'desire': rng.choice(DescriptionVariationEngineV2.EMOTIONAL_HOOKS['desire']),
                'urgency': rng.choice(DescriptionVariationEngineV2.EMOTIONAL_HOOKS['urgency']),
                'benefit': rng.choice(DescriptionVariationEngineV2.BENEFIT_PHRASES['results']),
                'feature': rng.choice(DescriptionVariationEngineV2.BENEFIT_PHRASES['features']),
                'differentiator': rng.choice(DescriptionVariationEngineV2.BENEFIT_PHRASES['differentiators']),
                'cta': rng.choice(DescriptionVariationEngineV2.CTA_VARIATIONS[
                    rng.choice(['immediate', 'soft', 'authority'])
                ]),
                'experience': rng.choice(DescriptionVariationEngineV2.CREDIBILITY_MARKERS['experience']),
                'proof': rng.choice(DescriptionVariationEngineV2.CREDIBILITY_MARKERS['proof']),
                'guarantee': rng.choice(DescriptionVariationEngineV2.CREDIBILITY_MARKERS['guarantee']),
                'method': rng.choice(context['methods']),
                'result': rng.choice(context['results']),
                'power_word': rng.choice(context['power_words']),
                'length': rng.randint(60 + i*5, 85 + i*3)  # Longitud variable
            }
            
            # Hash de combinaci√≥n para evitar duplicados
            combo_hash = hashlib.md5(
                f"{template}{components['verb']}{components['cta']}".encode()
            ).hexdigest()[:8]
            
            if combo_hash not in used_combinations:
                used_combinations.add(combo_hash)
                descriptions_specs.append({
                    'template': template,
                    'components': components,
                    'index': i + 1,
                    'unique_id': combo_hash
                })
        
        # Generar prompt ultra-espec√≠fico
        prompt = DescriptionVariationEngineV2._build_creative_prompt(
            descriptions_specs,
            exclude_descriptions,
            business_type,
            temperature
        )
        
        return {
            'prompt': prompt,
            'specs': descriptions_specs,
            'seed': variation_seed,
            'unique_count': len(used_combinations)
        }
    
    @staticmethod
    def _build_creative_prompt(
        specs: List[Dict],
        exclude_descriptions: List[str],
        business_type: str,
        temperature: float
    ) -> str:
        """
        Construye prompt ULTRA CREATIVO para la IA
        """
        
        # Nivel de creatividad
        creativity_level = "M√ÅXIMA" if temperature > 0.8 else "ALTA" if temperature > 0.5 else "MODERADA"
        
        # Exclusiones
        exclusion_text = ""
        if exclude_descriptions:
            exclusion_text = f"""
üö´ **ESTRICTAMENTE PROHIBIDO (Evitar >70% similitud):**
{chr(10).join([f'‚ùå "{desc[:60]}..."' for desc in exclude_descriptions[:5]])}

**PALABRAS/FRASES BLOQUEADAS:**
- {', '.join([desc.split()[:3] for desc in exclude_descriptions[:3]] if exclude_descriptions else [])}
"""
        
        prompt = f"""
{'='*80}
üé® GENERACI√ìN CREATIVA DE DESCRIPCIONES - CREATIVIDAD {creativity_level}
{'='*80}

üéØ OBJETIVO: Crear {len(specs)} descripciones COMPLETAMENTE √öNICAS y CREATIVAS
üìù Tipo: {business_type.upper()}
üî• Temperatura creativa: {temperature}

{exclusion_text}

üìã ESPECIFICACIONES DETALLADAS:
{'='*80}
"""
        
        for spec in specs:
            components = spec['components']
            prompt += f"""
üìÑ **DESCRIPCI√ìN #{spec['index']} [ID: {spec['unique_id']}]**
‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ
üéØ Keyword principal: "{components['keyword']}"
üìè Longitud exacta: {components['length']} caracteres
üé≠ Estilo: {creativity_level} CREATIVIDAD

üß© COMPONENTES OBLIGATORIOS A USAR CREATIVAMENTE:
   ‚Ä¢ Verbo poder: {components['verb']}
   ‚Ä¢ Beneficio: {components['benefit']}
   ‚Ä¢ CTA √∫nico: {components['cta']}
   ‚Ä¢ M√©todo: {components['method']}
   ‚Ä¢ Resultado: {components['result']}
   ‚Ä¢ Palabra poder: {components['power_word']}

üìê ESTRUCTURA SUGERIDA (adaptar creativamente):
   "{spec['template'][:50]}..."

‚ö° INSTRUCCIONES ESPEC√çFICAS:
   1. DEBE ser 100% diferente a las dem√°s
   2. Incluir "{components['keyword']}" naturalmente
   3. Usar sin√≥nimos creativos de los componentes
   4. NO repetir estructura de otras descripciones
   5. Variar inicio (no empezar todas igual)
   6. CTA diferente en cada una
   7. Capitalizar Cada Palabra Importante

"""
        
        prompt += f"""
{'='*80}
‚ö†Ô∏è REGLAS CR√çTICAS DE CREATIVIDAD:
{'='*80}

1Ô∏è‚É£ **VARIACI√ìN EXTREMA**: Cada descripci√≥n con estructura TOTALMENTE diferente
2Ô∏è‚É£ **SIN√ìNIMOS CREATIVOS**: No usar las mismas palabras, buscar alternativas
3Ô∏è‚É£ **INICIO VARIADO**: Empezar cada una de forma √∫nica:
   - Desc 1: Con pregunta
   - Desc 2: Con afirmaci√≥n
   - Desc 3: Con beneficio
   - Desc 4: Con autoridad/credibilidad

4Ô∏è‚É£ **LONGITUD VARIADA**: 
   - Desc 1: {specs[0]['components']['length']} chars
   - Desc 2: {specs[1]['components']['length'] if len(specs) > 1 else 70} chars
   - Desc 3: {specs[2]['components']['length'] if len(specs) > 2 else 75} chars
   - Desc 4: {specs[3]['components']['length'] if len(specs) > 3 else 80} chars

5Ô∏è‚É£ **CTAs √öNICOS**: Nunca repetir el mismo llamado a acci√≥n

6Ô∏è‚É£ **PROHIBICIONES ABSOLUTAS**:
   ‚ùå NO usar comillas ("") 
   ‚ùå NO usar signos de exclamaci√≥n (!)
   ‚ùå NO usar signos de interrogaci√≥n al final (?)
   ‚ùå NO repetir palabras clave entre descripciones
   ‚ùå NO copiar frases de las exclusiones

7Ô∏è‚É£ **CREATIVIDAD {creativity_level}**:
   {'üî• Ser EXTREMADAMENTE creativo y original' if temperature > 0.8 else '‚ú® Mantener creatividad alta pero controlada'}
   {'üé® Usar met√°foras y lenguaje evocador' if business_type == 'esoteric' else 'üìä Mantener tono profesional pero atractivo'}

{'='*80}
üéØ GENERA AHORA {len(specs)} DESCRIPCIONES √öNICAS Y PODEROSAS
{'='*80}
"""
        
        return prompt
    
    @staticmethod
    def get_variation_prompt(
        keywords: List[str],
        num_descriptions: int,
        variation_seed: int,
        business_type: str = "esoteric",
        exclude_descriptions: List[str] = []
    ) -> str:
        """
        Interfaz principal para obtener prompt de variaci√≥n
        """
        
        result = DescriptionVariationEngineV2.generate_unique_descriptions(
            keywords=keywords,
            num_descriptions=num_descriptions,
            business_type=business_type,
            variation_seed=variation_seed,
            temperature=0.85,  # Alta creatividad por defecto
            exclude_descriptions=exclude_descriptions,
            force_unique=True
        )
        
        return result['prompt']




# ============================================================================
# TEMPLATES DE PROMPTS PRINCIPALES
# ============================================================================

class AdPromptTemplates:
    """Generador de prompts transaccionales - VERSI√ìN 6.0 DEFINITIVA"""
    
    @staticmethod
    def analyze_keywords(keywords: List[str]) -> Dict[str, any]:
        """Analiza keywords para determinar intenci√≥n de b√∫squeda"""
        keywords_lower = " ".join(keywords).lower()
        
        analysis = {
            'business_type': 'esoteric',
            'intent_type': 'transactional',
            'service_category': [],
            'urgency_level': 'normal',
            'modality': []
        }
        
        if any(kw in keywords_lower for kw in ["amarre", "amarrar", "amarres"]):
            analysis['service_category'].append('amarres')
        
        if any(kw in keywords_lower for kw in ["brujer√≠a", "bruja", "brujo", "hechizo", "ritual"]):
            analysis['service_category'].append('brujeria')
        
        if any(kw in keywords_lower for kw in ["tarot", "lectura", "videncia", "vidente"]):
            analysis['service_category'].append('tarot')
        
        if any(kw in keywords_lower for kw in ["urgente", "r√°pido", "ya", "hoy", "24h", "inmediato"]):
            analysis['urgency_level'] = 'alta'
        
        if any(kw in keywords_lower for kw in ["online", "l√≠nea", "virtual", "whatsapp"]):
            analysis['modality'].append('online')
        
        return analysis
    
    @staticmethod
    def get_transactional_esoteric_prompt(
        keywords: List[str],
        num_headlines: int = 15,
        num_descriptions: int = 4,
        tone: str = "profesional",
        temperature: float = 1.0,
        ad_variation_seed: int = 0,
        use_location_insertion: bool = False,
        exclude_descriptions: List[str] = []
    ) -> str:
        """Prompt TRANSACCIONAL v6.0 - Coherencia Sint√°ctica OBLIGATORIA + Validaci√≥n"""
        
        # Pre-procesar keywords
        validation = KeywordProcessor.validate_and_clean(keywords)
        clean_keywords = validation['valid_keywords'] if validation['valid_keywords'] else keywords
        
        analysis = AdPromptTemplates.analyze_keywords(clean_keywords)
        
        # Rotar keywords
        rotated_keywords = clean_keywords[ad_variation_seed:] + clean_keywords[:ad_variation_seed]
        keywords_str = ", ".join(rotated_keywords[:30])
        
        # Calcular distribuci√≥n
        location_count = 0
        if use_location_insertion:
            location_count = min(5, max(3, int(num_headlines * 0.25)))
        
        remaining_headlines = num_headlines - location_count
        transactional_count = int(remaining_headlines * 0.60)
        urgent_count = int(remaining_headlines * 0.25)
        informational_count = remaining_headlines - transactional_count - urgent_count
        
        # Instrucci√≥n de variaci√≥n
        variation_strategy = ""
        if ad_variation_seed == 0:
            variation_strategy = "**ANUNCIO #1:** T√≠tulos DIRECTOS (keyword + modificador)"
        elif ad_variation_seed == 1:
            variation_strategy = "**ANUNCIO #2:** T√≠tulos de URGENCIA (keyword + tiempo)"
        else:
            variation_strategy = "**ANUNCIO #3+:** T√≠tulos INFORMATIVOS (c√≥mo/para qu√© + keyword)"
        
        # Instrucciones de ubicaci√≥n CORREGIDAS
        location_instructions = ""
        if use_location_insertion:
            location_instructions = f"""
‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê
üìç INSERCIONES DE UBICACI√ìN ({location_count} T√çTULOS OBLIGATORIOS)
‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê

**C√ìDIGOS LITERALES A USAR (copiar EXACTAMENTE):**

Para CIUDAD: {{LOCATION(City)}}
Para ESTADO: {{LOCATION(State)}}
Para PA√çS: {{LOCATION(Country)}}

‚úÖ **EJEMPLOS CORRECTOS:**
"Amarres De {{LOCATION(City)}}"
"Brujos En {{LOCATION(State)}}"
"Hechizos {{LOCATION(Country)}}"
"Brujo Profesional {{LOCATION(City)}}"

‚ùå **INCORRECTO (NO HACER):**
"Brujos De Tu Ciudad" ‚Üê MAL (usar {{LOCATION(City)}})
"Amarres En Tu Estado" ‚Üê MAL (usar {{LOCATION(State)}})
"Brujos En Pa√≠s" ‚Üê MAL (usar {{LOCATION(Country)}})

üìä **DISTRIBUCI√ìN:**
- {max(1, location_count//3 + location_count%3)} t√≠tulos con {{LOCATION(City)}}
- {max(1, location_count//3)} t√≠tulos con {{LOCATION(State)}}
- {max(1, location_count//3)} t√≠tulos con {{LOCATION(Country)}}

‚ö†Ô∏è **IMPORTANTE:** Escribir el c√≥digo LITERAL entre llaves dobles {{}}, exactamente como se muestra.

‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê
"""
        
        # Generar instrucciones de descripci√≥n
        description_instructions = DescriptionVariationEngineV2.generate_unique_descriptions(
            keywords=rotated_keywords,
            num_descriptions=num_descriptions,
            variation_seed=ad_variation_seed,
            exclude_descriptions=exclude_descriptions
        )
        
        return f"""Eres un experto en copywriting para Google Ads especializado en servicios esot√©ricos.

**MISI√ìN CR√çTICA:** Generar t√≠tulos COHERENTES y GRAMATICALMENTE CORRECTOS basados √öNICAMENTE en las keywords proporcionadas.

‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê
üîë KEYWORDS PRINCIPALES (BASE OBLIGATORIA)
‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê

{keywords_str}

**ANUNCIO #{ad_variation_seed + 1}** | Temperatura: {temperature}

{variation_strategy}

‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê
‚ö†Ô∏è REGLA #1 ABSOLUTA - COHERENCIA SINT√ÅCTICA
‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê

**OBLIGATORIO:** Todos los t√≠tulos deben ser FRASES COHERENTES y GRAMATICALMENTE CORRECTAS.

‚ùå **PROHIBIDO - MEZCLAS SIN SENTIDO:**
- "Brujos En Para Enamorar" ‚Üê INCORRECTO
- "Amarres De Para Que Vuelva" ‚Üê INCORRECTO
- "Ritual En Con Foto" ‚Üê INCORRECTO
- "¬øSe Te Perdi√≥ tu Brujo?" ‚Üê INCORRECTO
- "¬øPerdiste a tu Brujo?" ‚Üê INCORRECTO

‚úÖ **OBLIGATORIO - ESTRUCTURAS CORRECTAS:**
- "Amarres De Amor Efectivos" ‚Üê CORRECTO
- "Brujos Especializados En Amarres" ‚Üê CORRECTO
- "Hechizo Para Que Regrese" ‚Üê CORRECTO
- "Ritual Para Recuperar Amor" ‚Üê CORRECTO
- "Problemas Con Tu Pareja?" ‚Üê CORRECTO

‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê
üìä ESTRUCTURA OBLIGATORIA DE T√çTULOS
‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê

Cada t√≠tulo debe seguir UNA de estas estructuras sint√°cticas:

**üîµ TRANSACCIONAL ({transactional_count} t√≠tulos):**

1Ô∏è‚É£ [KEYWORD COMPLETA] + [Modificador]
   Ejemplo: "Amarres De Amor Efectivos"
   Ejemplo: "Brujos Profesionales Certificados"

2Ô∏è‚É£ [Rol/Servicio] + Especialista En + [KEYWORD]
   Ejemplo: "Brujo Especialista En Amarres"
   Ejemplo: "Experto En Rituales De Amor"

3Ô∏è‚É£ [KEYWORD] + Para + [Objetivo]
   Ejemplo: "Amarres Para Recuperar Amor"
   Ejemplo: "Ritual Para Que Regrese"

4Ô∏è‚É£ [KEYWORD] + [Tipo Espec√≠fico]
   Ejemplo: "Amarres Con Foto Y Nombre"
   Ejemplo: "Rituales De Amor Efectivos"

**üî¥ URGENTE ({urgent_count} t√≠tulos):**

1Ô∏è‚É£ [KEYWORD] + Para Que + [Acci√≥n]
   Ejemplo: "Amarre Para Que Vuelva"
   Ejemplo: "Ritual Para Que Me Busque"

2Ô∏è‚É£ [Verbo] + [KEYWORD] + [Tiempo]
   Ejemplo: "Recuperar Amor En 7 D√≠as"
   Ejemplo: "Regreso De Pareja R√°pido"

3Ô∏è‚É£ [KEYWORD] + [Urgencia]
   Ejemplo: "Amarres Urgentes 24h"
   Ejemplo: "Ritual Inmediato"

**üü¢ INFORMACIONAL ({informational_count} t√≠tulos):**

1Ô∏è‚É£ C√≥mo + [Verbo] + [KEYWORD]
   Ejemplo: "C√≥mo Hacer Amarres Efectivos"
   Ejemplo: "C√≥mo Recuperar A Mi Pareja"

2Ô∏è‚É£ [KEYWORD] + [Incentivo]
   Ejemplo: "Amarres Consulta Gratis"
   Ejemplo: "Ritual Primera Sesi√≥n Free"

{location_instructions}

{description_instructions}

‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê
üö´ VALIDACI√ìN DE COHERENCIA (REVISAR ANTES DE ENVIAR)
‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê

Antes de responder, verifica CADA t√≠tulo:

‚ñ° ¬øEl t√≠tulo forma una FRASE COMPLETA Y COHERENTE?
‚ñ° ¬øSe lee naturalmente sin palabras sueltas?
‚ñ° ¬øLa keyword est√° COMPLETA (no fragmentada)?
‚ñ° ¬øLos conectores (en, de, para) tienen sentido?
‚ñ° ¬øNo hay mezclas tipo "Brujos En Para"?

Si alg√∫n t√≠tulo falla estas preguntas, CORR√çGELO antes de enviar.

‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê
üìè ESPECIFICACIONES T√âCNICAS
‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê

**T√çTULOS:** 20-30 caracteres | Capitalizar Cada Palabra | Sin ! ? ¬° ¬ø
**DESCRIPCIONES:** 80-90 caracteres | Capitalizar Cada Palabra | Sin ! ?

‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê
üì¶ FORMATO JSON (SIN MARKDOWN, SIN ```)
‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê

RESPONDE SOLO ESTO (sin ``` ni json):

{{
  "headlines": [
    "T√≠tulo Coherente 1",
    "T√≠tulo Coherente 2",
    ...{num_headlines} t√≠tulos COHERENTES Y √öNICOS
  ],
  "descriptions": [
    "Desc √∫nica 1 (80-85 chars)",
    "Desc √∫nica 2 (80-85 chars)",
    "Desc √∫nica 3 (80-85 chars)",
    "Desc √∫nica 4 (85-90 chars)"
  ]
}}

‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê
‚úÖ CHECKLIST FINAL (OBLIGATORIO)
‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê

‚ñ° {num_headlines} t√≠tulos COHERENTES Y GRAMATICALMENTE CORRECTOS
‚ñ° Cada t√≠tulo usa keyword COMPLETA (no fragmentada)
‚ñ° CERO mezclas tipo "Brujos En Para"
‚ñ° {num_descriptions} descripciones 100% √öNICAS
‚ñ° Capitalizaci√≥n correcta
‚ñ° Longitudes correctas
‚ñ° JSON v√°lido sin markdown
‚ñ° T√≠tulos con ubicaci√≥n usan c√≥digo LITERAL ({{LOCATION(City)}})

üöÄ GENERA AHORA (SOLO EL JSON, SIN EXPLICACIONES NI TEXTO ADICIONAL)"""

    @staticmethod
    def get_prompt_for_keywords(
        keywords: List[str],
        num_headlines: int = 15,
        num_descriptions: int = 4,
        tone: str = "profesional",
        business_type: str = "auto",
        temperature: float = 1.0,
        ad_variation_seed: int = 0,
        use_location_insertion: bool = False,
        exclude_descriptions: List[str] = []
    ) -> str:
        """Selector de prompt v6.0 con validaci√≥n"""
        
        # ‚úÖ LOGS DE DEBUG PARA INSERCIONES DE UBICACI√ìN
        if use_location_insertion:
            logger.info("‚úÖ GENERANDO PROMPT CON INSERCIONES DE UBICACI√ìN")
            logger.info("‚úÖ El prompt contendr√° instrucciones para {LOCATION(City)}, etc.")
        
        return AdPromptTemplates.get_transactional_esoteric_prompt(
            keywords=keywords,
            num_headlines=num_headlines,
            num_descriptions=num_descriptions,
            tone=tone,
            temperature=temperature,
            ad_variation_seed=ad_variation_seed,
            use_location_insertion=use_location_insertion,  # ‚úÖ CR√çTICO: PASAR ESTE PAR√ÅMETRO
            exclude_descriptions=exclude_descriptions
        )


# ============================================================================
# PROMPTS MAGN√âTICOS
# ============================================================================

class MagneticAdPrompts:
    """Prompts MAGN√âTICOS v6.0 con validaci√≥n"""
    
    @staticmethod
    def get_magnetic_prompt(
        keywords: List[str],
        num_headlines: int = 15,
        num_descriptions: int = 4,
        tone: str = "profesional",
        temperature: float = 0.9,
        ad_variation_seed: int = 0,
        use_location_insertion: bool = False,
        exclude_descriptions: List[str] = []
    ) -> str:
        """Prompt MAGN√âTICO con coherencia sint√°ctica y validaci√≥n"""
        
        # Pre-procesar keywords
        validation = KeywordProcessor.validate_and_clean(keywords)
        clean_keywords = validation['valid_keywords'] if validation['valid_keywords'] else keywords
        
        rotated_keywords = clean_keywords[ad_variation_seed:] + clean_keywords[:ad_variation_seed]
        keywords_str = ", ".join(rotated_keywords[:30])
        
        location_count = 0
        if use_location_insertion:
            location_count = min(5, max(3, int(num_headlines * 0.25)))
        
        remaining_headlines = num_headlines - location_count
        beneficio_urgencia = int(remaining_headlines * 0.33)
        credibilidad_exclusividad = int(remaining_headlines * 0.33)
        control_curiosidad = remaining_headlines - beneficio_urgencia - credibilidad_exclusividad
        
        location_instructions = ""
        if use_location_insertion:
            location_instructions = f"""
‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê
üìç INSERCIONES MAGN√âTICAS ({location_count} T√çTULOS)
‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê

Usar c√≥digos LITERALES:
- {{LOCATION(City)}} para ciudad
- {{LOCATION(State)}} para estado
- {{LOCATION(Country)}} para pa√≠s

‚úÖ "Urgente Brujo {{LOCATION(City)}}"
‚úÖ "Amarres Garantizados {{LOCATION(State)}}"

‚ùå NO usar "tu ciudad", "tu estado", etc.

‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê
"""
        
        description_instructions = DescriptionVariationEngineV2.generate_unique_descriptions(
            keywords=rotated_keywords,
            num_descriptions=num_descriptions,
            variation_seed=ad_variation_seed,
            exclude_descriptions=exclude_descriptions
        )
        
        return f"""Eres un experto en copywriting MAGN√âTICO para Google Ads.

**MISI√ìN:** Generar anuncios de M√ÅXIMA INTENSIDAD con coherencia sint√°ctica absoluta.

üîë **KEYWORDS:** {keywords_str}
**ANUNCIO MAGN√âTICO #{ad_variation_seed + 1}** | Temp: {temperature}

üî¥ MODO MAGN√âTICO ACTIVADO üî¥

{location_instructions}

‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê
‚ö° ESTRUCTURA MAGN√âTICA
‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê

**üéØ BENEFICIO + URGENCIA ({beneficio_urgencia} t√≠tulos):**
- [KEYWORD] + [Resultado] + [Tiempo]
- [Urgencia] + [KEYWORD] + [Garant√≠a]

**üèÜ CREDIBILIDAD ({credibilidad_exclusividad} t√≠tulos):**
- [Experiencia] + [KEYWORD]
- [KEYWORD] + [Certificaci√≥n]

**üß† CURIOSIDAD ({control_curiosidad} t√≠tulos):**
- [Secreto] + [KEYWORD]
- [KEYWORD] + [Revelaci√≥n]

{description_instructions}

‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê
‚ö†Ô∏è VALIDACI√ìN MAGN√âTICA
‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê

‚ñ° T√≠tulos COHERENTES (sin "Brujos En Para")
‚ñ° Keywords COMPLETAS
‚ñ° M√°xima intensidad psicol√≥gica
‚ñ° Descripciones 100% √öNICAS
‚ñ° Ubicaciones con c√≥digo LITERAL

‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê
üì¶ RESPONDER SOLO JSON (sin ``` ni markdown):
‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê

{{
  "headlines": ["T√≠tulo Magn√©tico 1", ...{num_headlines}],
  "descriptions": ["Desc √∫nica 1", ...{num_descriptions}]
}}

üöÄ GENERA AHORA"""


# ============================================================================
# CTR OPTIMIZER PREDICTIVO v2.0
# ============================================================================

import logging

# ‚úÖ Logger global para debug
logger = logging.getLogger(__name__)

class CTROptimizer:
    """
    Optimiza anuncios para m√°ximo CTR basado en an√°lisis heur√≠stico,
    patrones hist√≥ricos y evaluaci√≥n sem√°ntica avanzada.
    
    Metodolog√≠a:
    1. An√°lisis de patrones l√©xicos (palabras clave de alto impacto)
    2. Evaluaci√≥n sem√°ntica (relevancia con intenci√≥n)
    3. Detecci√≥n de anti-patrones (frases incoherentes)
    4. Scoring contextual (servicios esot√©ricos)
    5. Recomendaciones personalizadas
    """
    
    # ========================================================================
    # BOOSTERS DE CTR GENERAL
    # ========================================================================
    
    CTR_BOOSTERS = {
        'numeros': {
            'patterns': [r'\d+%', r'\d+\s*(?:d√≠as|horas|a√±os)', r'\d+'],
            'boost': 15,
            'description': 'N√∫meros y estad√≠sticas'
        },
        'urgencia': {
            'words': ['ya', 'ahora', 'hoy', 'urgente', 'inmediato', 'r√°pido', '24h', '24 horas'],
            'boost': 14,
            'description': 'Palabras de urgencia'
        },
        'gratis': {
            'words': ['gratis', 'free', 'sin costo', 'sin cargo', 'primera sesi√≥n free', 'consulta gratis'],
            'boost': 18,
            'description': 'Ofertas gratuitas'
        },
        'garantia': {
            'words': ['garantizado', 'asegurado', 'certero', 'garant√≠a', '100%'],
            'boost': 12,
            'description': 'Garant√≠as y certeza'
        },
        'exclusividad': {
            'words': ['√∫nico', 'exclusivo', 'especial', 'limitado', 'solo hoy', 'privado'],
            'boost': 10,
            'description': 'Exclusividad y limitaci√≥n'
        }
    }
    
    # ========================================================================
    # BOOSTERS ESOT√âRICOS ESPEC√çFICOS
    # ========================================================================
    
    ESOTERIC_BOOSTERS = {
        'autoridad': {
            'words': ['experto', 'especialista', 'maestro', 'profesional', 'certificado', 'a√±os', 'experiencia'],
            'boost': 16,
            'description': 'Autoridad y experiencia',
            'weight': 1.3  # Multiplicador para servicios esot√©ricos
        },
        'efectividad': {
            'words': ['efectivo', 'efectiva', 'funciona', 'funcionan', 'real', 'reales', 'comprobado', 'probado'],
            'boost': 14,
            'description': 'Efectividad del servicio',
            'weight': 1.2
        },
        'resultado': {
            'words': ['resultado', 'resultados', 'recupera', 'recuperar', 'regresa', 'regresar', 'vuelve', 'volver'],
            'boost': 13,
            'description': 'Promesa de resultados',
            'weight': 1.4
        },
        'urgencia_esoterica': {
            'words': ['urgente', 'emergencia', 'crisis', 'desesperado', 'necesidad', 'necesitas', 'precisas'],
            'boost': 16,
            'description': 'Urgencia emocional',
            'weight': 1.3
        },
        'discretion': {
            'words': ['discreto', 'discreci√≥n', 'confidencial', 'privado', 'confidencialidad', 'secreto'],
            'boost': 11,
            'description': 'Confidencialidad',
            'weight': 1.1
        },
        'cta_esoterica': {
            'words': ['consulta', 'consulta ya', 'llama ya', 'whatsapp', 'contacta', 'escribe', 'agenda'],
            'boost': 12,
            'description': 'CTAs relevantes',
            'weight': 1.0
        }
    }
    
    # ========================================================================
    # PATRONES DE INTENCI√ìN
    # ========================================================================
    
    INTENT_KEYWORDS = {
        'urgente': {
            'keywords': ['urgente', 'ahora', 'inmediato', 'r√°pido', '24h', 'ya'],
            'weight': 1.2,
            'description': 'Intenci√≥n urgente'
        },
        'transaccional': {
            'keywords': ['consulta', 'llama', 'contacta', 'agenda', 'whatsapp', 'escribe'],
            'weight': 1.1,
            'description': 'Intenci√≥n transaccional'
        },
        'resultado': {
            'keywords': ['recuperar', 'regresa', 'vuelve', 'enamorar', 'conquistar', 'atraer'],
            'weight': 1.3,
            'description': 'Promesa de resultado'
        },
        'autoridad': {
            'keywords': ['especialista', 'experto', 'profesional', 'maestro', 'a√±os', 'experiencia'],
            'weight': 1.2,
            'description': 'Autoridad percibida'
        },
        'credibilidad': {
            'keywords': ['garantizado', 'efectivo', 'real', 'comprobado', 'testimonios', 'casos'],
            'weight': 1.1,
            'description': 'Credibilidad y confianza'
        }
    }
    
    # ========================================================================
    # ANTI-PATRONES (FRASES INCOHERENTES)
    # ========================================================================
    
    ANTI_PATTERNS = {
        'incoherencia_prep': {
            'patterns': [
                r'\b(?:en|de|para|con)\s+(?:en|de|para|con)\b',  # "en para", "de de", etc.
                r'\b(?:para)\s+(?:en)\b',  # "para en"
                r'\b(?:en)\s+(?:para)\b',  # "en para"
            ],
            'penalty': 25,
            'description': 'Preposiciones repetidas o incoherentes',
            'severity': 'critical'
        },
        'palabra_repetida': {
            'patterns': [
                r'\b(\w+)\s+\1\b',  # Palabra repetida consecutiva: "amor amor"
            ],
            'penalty': 15,
            'description': 'Palabra repetida consecutivamente',
            'severity': 'high'
        },
        'fragmento_incompleto': {
            'patterns': [
                r'^(?:de|en|para|con|por)\s+',  # Empieza con preposici√≥n
                r'\s+(?:de|en|para|con|por)$',  # Termina con preposici√≥n
            ],
            'penalty': 20,
            'description': 'Fragmento incompleto o sin verbo',
            'severity': 'critical'
        },
        'demasiados_modificadores': {
            'patterns': [
                r'(?:muy|super|ultra|mega)\s+(?:muy|super|ultra|mega)',  # Modificadores repetidos
            ],
            'penalty': 10,
            'description': 'Modificadores excesivos',
            'severity': 'medium'
        }
    }
    
    # ========================================================================
    # CONFIGURACI√ìN
    # ========================================================================
    
    BASE_SCORE = 50
    MAX_SCORE = 100
    MIN_SCORE = 0
    
    # Rangos √≥ptimos
    OPTIMAL_LENGTH = {'min': 20, 'max': 30, 'optimal': 25}
    
    def __init__(self, business_type: str = 'esoteric'):
        """
        Inicializa el optimizador
        
        Args:
            business_type: Tipo de negocio ('esoteric', 'default', 'tech', etc.)
        """
        self.logger = logging.getLogger(self.__class__.__name__)
        self.business_type = business_type
    
    # ========================================================================
    # M√âTODOS DE AN√ÅLISIS
    # ========================================================================
    
    def _check_anti_patterns(self, headline: str) -> Dict[str, Any]:
        """
        Detecta anti-patrones (frases incoherentes)
        
        Returns:
            {
                'detected': List[str],
                'total_penalty': float,
                'is_coherent': bool
            }
        """
        detected = []
        total_penalty = 0
        headline_lower = headline.lower()
        
        for pattern_type, config in self.ANTI_PATTERNS.items():
            for pattern in config['patterns']:
                if re.search(pattern, headline_lower, re.IGNORECASE):
                    detected.append({
                        'type': pattern_type,
                        'description': config['description'],
                        'severity': config['severity'],
                        'penalty': config['penalty']
                    })
                    total_penalty += config['penalty']
                    self.logger.debug(f"Anti-patr√≥n '{pattern_type}' detectado en '{headline}'")
                    break  # Un patr√≥n detectado es suficiente
        
        return {
            'detected': detected,
            'total_penalty': total_penalty,
            'is_coherent': len(detected) == 0
        }
    
    def _check_boosts(self, headline: str, is_esoteric: bool = True) -> Dict[str, Any]:
        """
        Eval√∫a boosters de CTR aplicables
        
        Returns:
            {
                'score': float,
                'boosts_applied': List[Dict],
                'raw_score': float
            }
        """
        score = self.BASE_SCORE
        applied_boosts = []
        headline_lower = headline.lower()
        
        # ===== BOOSTERS GENERALES =====
        for boost_type, config in self.CTR_BOOSTERS.items():
            boost_found = False
            
            # Buscar por patrones regex
            if 'patterns' in config:
                for pattern in config['patterns']:
                    if re.search(pattern, headline, re.IGNORECASE):
                        score += config['boost']
                        applied_boosts.append({
                            'type': boost_type,
                            'description': config['description'],
                            'boost': config['boost'],
                            'triggered_by': 'pattern'
                        })
                        boost_found = True
                        self.logger.debug(f"Boost '{boost_type}' (patr√≥n) en '{headline}': +{config['boost']}")
                        break
            
            # Buscar por palabras clave
            if not boost_found and 'words' in config:
                for word in config['words']:
                    if word in headline_lower:
                        score += config['boost']
                        applied_boosts.append({
                            'type': boost_type,
                            'description': config['description'],
                            'boost': config['boost'],
                            'triggered_by': f'word: {word}'
                        })
                        self.logger.debug(f"Boost '{boost_type}' (palabra) en '{headline}': +{config['boost']}")
                        break
        
        # ===== BOOSTERS ESOT√âRICOS =====
        if is_esoteric:
            for boost_type, config in self.ESOTERIC_BOOSTERS.items():
                for word in config.get('words', []):
                    if word in headline_lower:
                        boost_value = int(config['boost'] * config.get('weight', 1.0))
                        score += boost_value
                        applied_boosts.append({
                            'type': f"esoteric_{boost_type}",
                            'description': config['description'],
                            'boost': boost_value,
                            'triggered_by': f'word: {word}'
                        })
                        self.logger.debug(f"Boost esot√©rico '{boost_type}' en '{headline}': +{boost_value}")
                        break
        
        # ===== PENALIZACIONES POR LONGITUD =====
        length = len(headline)
        length_penalty = 0
        
        if length < self.OPTIMAL_LENGTH['min']:
            length_penalty = 15
            self.logger.debug(f"Penalizaci√≥n por longitud corta en '{headline}': {length} chars")
        elif length > self.OPTIMAL_LENGTH['max']:
            length_penalty = 8
            self.logger.debug(f"Penalizaci√≥n por longitud larga en '{headline}': {length} chars")
        
        # Bonus si est√° en rango √≥ptimo
        if self.OPTIMAL_LENGTH['min'] <= length <= self.OPTIMAL_LENGTH['max']:
            score += 5
            applied_boosts.append({
                'type': 'optimal_length',
                'description': f'Longitud √≥ptima ({length} caracteres)',
                'boost': 5,
                'triggered_by': 'auto'
            })
        
        score -= length_penalty
        
        # ===== L√çMITES =====
        raw_score = score
        score = max(self.MIN_SCORE, min(score, self.MAX_SCORE))
        
        return {
            'score': score,
            'raw_score': raw_score,
            'boosts_applied': applied_boosts,
            'length': length,
            'length_penalty': length_penalty
        }
    
    def _analyze_semantic_relevance(self, headline: str, keywords: Optional[List[str]] = None) -> Dict[str, Any]:
        """
        Analiza relevancia sem√°ntica del headline con keywords e intenci√≥n
        
        Returns:
            {
                'keyword_match_score': float,
                'intents_found': List[str],
                'semantic_score': float
            }
        """
        headline_lower = headline.lower()
        
        # An√°lisis de keywords
        keyword_match_score = 0.0
        keywords_found = []
        
        if keywords:
            for kw in keywords:
                kw_lower = kw.lower()
                if kw_lower in headline_lower:
                    keyword_match_score += 20
                    keywords_found.append(kw)
                    self.logger.debug(f"Keyword '{kw}' encontrada en '{headline}'")
        
        if keywords:
            keyword_match_score = (keyword_match_score / len(keywords)) * 100
            keyword_match_score = min(100, keyword_match_score)
        
        # An√°lisis de intenci√≥n
        intents_found = []
        intent_score = 0.0
        
        for intent, config in self.INTENT_KEYWORDS.items():
            for keyword in config['keywords']:
                if keyword in headline_lower:
                    intents_found.append(intent)
                    intent_score += (10 * config['weight'])
                    self.logger.debug(f"Intenci√≥n '{intent}' detectada en '{headline}'")
                    break
        
        intent_score = min(100, intent_score)
        
        # Score sem√°ntico combinado
        semantic_score = (keyword_match_score * 0.6) + (intent_score * 0.4)
        
        return {
            'keyword_match_score': round(keyword_match_score, 2),
            'keywords_found': keywords_found,
            'intents_found': intents_found,
            'intent_score': round(intent_score, 2),
            'semantic_score': round(semantic_score, 2)
        }
    
    def _generate_recommendations(self, analysis: Dict[str, Any]) -> List[str]:
        """
        Genera recomendaciones personalizadas basadas en el an√°lisis
        """
        recommendations = []
        headline = analysis['headline']
        score = analysis['score']
        boosts = analysis['boosts_applied']
        anti_patterns = analysis['anti_patterns']
        semantic = analysis.get('semantic', {})
        
        # ===== RECOMENDACIONES POR PUNTUACI√ìN =====
        if score < 50:
            recommendations.append("üî¥ CTR BAJO: Necesita mejora significativa")
        elif score < 70:
            recommendations.append("üü° CTR MEDIO: Puede mejorar")
        else:
            recommendations.append("üü¢ CTR ALTO: Buen potencial")
        
        # ===== RECOMENDACIONES POR ANTI-PATRONES =====
        if anti_patterns['detected']:
            for ap in anti_patterns['detected']:
                if ap['severity'] == 'critical':
                    recommendations.append(f"‚ùå CR√çTICO: {ap['description']} - Corregir inmediatamente")
                elif ap['severity'] == 'high':
                    recommendations.append(f"‚ö†Ô∏è IMPORTANTE: {ap['description']}")
                else:
                    recommendations.append(f"üí° SUGERENCIA: {ap['description']}")
        
        # ===== RECOMENDACIONES POR BOOSTERS FALTANTES =====
        applied_types = [b['type'] for b in boosts]
        
        if 'numeros' not in applied_types:
            recommendations.append("üìä Agrega n√∫meros o % para mejorar CTR (+15)")
        
        if 'urgencia' not in applied_types:
            recommendations.append("‚è±Ô∏è Incluye palabras de urgencia (ya, ahora, hoy) para +14 CTR")
        
        if 'gratis' not in applied_types:
            recommendations.append("üí∞ Considera 'gratis' o 'sin costo' (+18 CTR)")
        
        if 'garantia' not in applied_types:
            recommendations.append("‚úÖ A√±ade 'garantizado' o 'asegurado' (+12 CTR)")
        
        if 'exclusividad' not in applied_types:
            recommendations.append("üéÅ Usa '√∫nico', 'exclusivo' o 'limitado' (+10 CTR)")
        
        # ===== RECOMENDACIONES POR LONGITUD =====
        if analysis['length'] < 20:
            recommendations.append("üìè T√≠tulo demasiado corto (actual: {}, √≥ptimo: 20-30)".format(analysis['length']))
        elif analysis['length'] > 30:
            recommendations.append("üìè T√≠tulo demasiado largo (actual: {}, √≥ptimo: 20-30)".format(analysis['length']))
        
        # ===== RECOMENDACIONES SEM√ÅNTICAS =====
        if semantic.get('keyword_match_score', 0) < 50:
            recommendations.append("üîç Baja relevancia con keywords - Incluir m√°s keywords principales")
        
        if not semantic.get('intents_found'):
            recommendations.append("üéØ No se detect√≥ intenci√≥n clara - Ser m√°s espec√≠fico")
        
        return recommendations
    
    def analyze_headline(
        self,
        headline: str,
        keywords: Optional[List[str]] = None
    ) -> Dict[str, Any]:
        """
        An√°lisis COMPLETO de un headline
        
        Returns:
            {
                'headline': str,
                'score': float,
                'rank': str ('A+', 'A', 'B', 'C', 'D', 'F'),
                'anti_patterns': Dict,
                'boosts': List,
                'semantic': Dict,
                'recommendations': List,
                'publishable': bool
            }
        """
        
        # 1. Verificar anti-patrones
        anti_patterns_result = self._check_anti_patterns(headline)
        
        # 2. Calcular boosts
        boosts_result = self._check_boosts(headline, is_esoteric=(self.business_type == 'esoteric'))
        
        # 3. An√°lisis sem√°ntico
        semantic_result = self._analyze_semantic_relevance(headline, keywords)
        
        # 4. Score final (anti-patrones reducen score)
        final_score = boosts_result['score'] - anti_patterns_result['total_penalty']
        final_score = max(self.MIN_SCORE, min(final_score, self.MAX_SCORE))
        
        # 5. Ranking
        if final_score >= 90:
            rank = 'A+'
        elif final_score >= 85:
            rank = 'A'
        elif final_score >= 70:
            rank = 'B'
        elif final_score >= 55:
            rank = 'C'
        elif final_score >= 40:
            rank = 'D'
        else:
            rank = 'F'
        
        # 6. An√°lisis combinado
        analysis = {
            'headline': headline,
            'score': final_score,
            'rank': rank,
            'anti_patterns': anti_patterns_result,
            'boosts_applied': boosts_result['boosts_applied'],
            'length': boosts_result['length'],
            'semantic': semantic_result,
            'publishable': final_score >= 60 and anti_patterns_result['is_coherent']
        }
        
        # 7. Generar recomendaciones
        analysis['recommendations'] = self._generate_recommendations(analysis)
        
        return analysis
    
    def predict_ctr_scores(
        self,
        headlines: List[str],
        keywords: Optional[List[str]] = None
    ) -> Dict[str, Any]:
        """
        Predice scores de CTR para m√∫ltiples headlines
        
        Returns:
            {
                'headlines_analysis': List[Dict],
                'average_ctr_score': float,
                'top_performers': List[Dict],
                'bottom_performers': List[Dict],
                'overall_recommendations': List[str],
                'quality_metrics': Dict
            }
        """
        
        if not headlines:
            return {
                'headlines_analysis': [],
                'average_ctr_score': 0,
                'top_performers': [],
                'bottom_performers': [],
                'overall_recommendations': ['‚ùå No hay headlines para analizar'],
                'quality_metrics': {}
            }
        
        # Analizar cada headline
        results = []
        for headline in headlines:
            result = self.analyze_headline(headline, keywords)
            results.append(result)
        
        # Calcular m√©tricas agregadas
        scores = [r['score'] for r in results]
        avg_score = sum(scores) / len(scores) if scores else 0
        coherent_count = sum(1 for r in results if r['anti_patterns']['is_coherent'])
        publishable_count = sum(1 for r in results if r['publishable'])
        
        # Top y bottom performers
        sorted_results = sorted(results, key=lambda x: x['score'], reverse=True)
        top_performers = sorted_results[:3]
        bottom_performers = sorted_results[-3:] if len(sorted_results) >= 3 else sorted_results
        
        # Recomendaciones generales
        overall_recommendations = []
        
        if avg_score < 60:
            overall_recommendations.append("üî¥ CALIDAD BAJA: Requiere revisi√≥n completa de headlines")
        elif avg_score < 75:
            overall_recommendations.append("üü° CALIDAD MEDIA: Optimizar headlines para mejorar CTR")
        else:
            overall_recommendations.append("üü¢ CALIDAD ALTA: Headlines optimizados para CTR")
        
        if coherent_count < len(headlines) * 0.8:
            overall_recommendations.append(f"‚ö†Ô∏è {len(headlines) - coherent_count} headlines con incoherencias")
        
        if publishable_count < len(headlines) * 0.5:
            overall_recommendations.append(f"‚ùå Solo {publishable_count}/{len(headlines)} headlines listos para publicar")
        else:
            overall_recommendations.append(f"‚úÖ {publishable_count}/{len(headlines)} headlines listos para publicar")
        
        # Analizar qu√© boosters se usan m√°s
        all_boosts = {}
        for r in results:
            for boost in r['boosts_applied']:
                boost_type = boost['type']
                all_boosts[boost_type] = all_boosts.get(boost_type, 0) + 1
        
        # Sugerir boosters no utilizados
        all_boost_types = set(self.CTR_BOOSTERS.keys()) | set(f"esoteric_{k}" for k in self.ESOTERIC_BOOSTERS.keys())
        unused_boosts = all_boost_types - set(all_boosts.keys())
        
        if unused_boosts:
            overall_recommendations.append(f"üí° Boosters no utilizados: {', '.join(list(unused_boosts)[:3])}")
        
        return {
            'headlines_analysis': results,
            'average_ctr_score': round(avg_score, 2),
            'top_performers': top_performers,
            'bottom_performers': bottom_performers,
            'overall_recommendations': overall_recommendations,
            'quality_metrics': {
                'total_headlines': len(headlines),
                'coherent': coherent_count,
                'publishable': publishable_count,
                'average_length': round(sum(r['length'] for r in results) / len(results), 1),
                'boosts_distribution': all_boosts
            }
        }


# ============================================================================
# INTEGRACI√ìN CON AdScoringSystem
# ============================================================================

class AdScoringSystemV6(AdScoringSystem):
    """AdScoringSystem mejorado con CTROptimizer integrado"""
    
    @staticmethod
    def _score_ctr_potential(ad: Dict[str, Any], business_type: str = 'esoteric') -> float:
        """
        Score de CTR usando CTROptimizer
        """
        optimizer = CTROptimizer(business_type=business_type)
        
        headlines = ad.get('headlines', [])
        keywords = ad.get('keywords', [])
        
        prediction = optimizer.predict_ctr_scores(headlines, keywords)
        
        # El score es el promedio normalizado (0-100)
        return prediction['average_ctr_score']
    
    @staticmethod
    def score_ad_with_ctr_analysis(
        ad: Dict[str, Any],
        keywords: List[str],
        business_type: str = 'esoteric'
    ) -> Dict[str, Any]:
        """
        Score completo de anuncio incluyendo an√°lisis CTR detallado
        """
        
        optimizer = CTROptimizer(business_type=business_type)
        
        # An√°lisis de CTR
        ctr_analysis = optimizer.predict_ctr_scores(
            ad.get('headlines', []),
            keywords
        )
        
        # Score de relevancia y otros
        scores = {
            'relevance': AdScoringSystem._score_relevance(ad, keywords),
            'coherence': AdScoringSystem._score_coherence(ad, keywords),
            'uniqueness': AdScoringSystem._score_uniqueness(ad),
            'ctr_potential': ctr_analysis['average_ctr_score'],
            'conversion_potential': AdScoringSystem._score_conversion_potential(ad)
        }
        
        weights = {
            'relevance': 0.25,
            'coherence': 0.20,
            'uniqueness': 0.10,
            'ctr_potential': 0.35,  # Mayor peso al CTR
            'conversion_potential': 0.10
        }
        
        total_score = sum(scores[k] * weights[k] for k in scores.keys())
        
        # Determinar rank
        if total_score >= 90:
            rank = 'A+'
        elif total_score >= 85:
            rank = 'A'
        elif total_score >= 75:
            rank = 'B'
        elif total_score >= 65:
            rank = 'C'
        elif total_score >= 50:
            rank = 'D'
        else:
            rank = 'F'
        
        return {
            'total_score': round(total_score, 2),
            'rank': rank,
            'breakdown': {k: round(v, 2) for k, v in scores.items()},
            'ctr_analysis': ctr_analysis,
            'publishable': total_score >= 70,
            'recommendations': ctr_analysis['overall_recommendations']
        }


# ============================================================================
# EXPORTACI√ìN
# ============================================================================

__all__ = [
    'KeywordProcessor',
    'AdQualityValidator',
    'AdScoringSystem',
    'AdScoringSystemV6',
    'CTROptimizer',
    'SearchIntentPatterns',
    'DescriptionVariationEngineV2',
    'AdPromptTemplates',
    'MagneticAdPrompts',
    'build_enhanced_prompt',
    'LOCATION_LEVELS',
    'TONE_PRESETS'
]